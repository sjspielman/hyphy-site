{
    "docs": [
        {
            "location": "/", 
            "text": "Hypothesis Testing using Phylogenies\n\n        \nAn open-source software package\n\n            \nfor comparative sequence analysis\n\n            \nusing stochastic evolutionary models\n\n    \nDownload\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n\n  \n\n  \n\n    \nHyPhy News", 
            "title": "Home"
        }, 
        {
            "location": "/about/", 
            "text": "Overview\n#\n\n\nHyPhy (\nHy\npothesis Testing using \nPhy\nlogenies) is an open-source software package for the analysis of genetic sequences (in particular the inference of natural selection) using techniques in phylogenetics, molecular evolution, and machine learning. It features a rich scripting language for limitless customization of analyses. Additionally, HyPhy features support for parallel computing environments (via message passing interface). HyPhy has over 10000 registered users and has been cited in over 1800 peer-reviewed publications (\nGoogle Scholar\n). \n\n\nBrief history\n#\n\n\nHyPhy grew out of the collaboration between \nSpencer Muse\n and \nSergei Kosakovsky Pond\n that commenced in 1997 and continues to this day, with many additional collaborators, including \nArt Poon\n, \nSimon Frost\n, \nSteven Weaver\n, \nStephanie Spielman\n, \nLance Hepler\n, \nMartin Smith\n, \nKonrad Scheffler\n, \nWayne Delport\n, \nBen Murrell\n, and \nJoel Wertheim\n. HyPhy was originally released in 2000, is currently at version 2.3, and is presently undergoing a major rewrite, with version v3.0 planned for release in 2018. \n\n\nDesign philosophy\n#\n\n\nHyPhy was designed to allow the specification and fitting of a broad class of continuous-time discrete-space Markov models of sequence evolution. To implement these models, HyPhy provides its own scripting language - \nHBL\n, or \nHyPhy Batch Language\n (see \nan example\n), which can be used to develop custom analyses or modify existing ones. Importantly, it is not necessary to learn (or even be aware of) HBL in order to use HyPhy, as most common models and analyses have been implemented for user convenience. Once a model is defined, it can be fitted to data (using a fixed topology tree), its parameters can be constrained in user-defined ways to test various hypotheses (e.g. is rate1 \n rate2), and simulate data from. HyPhy primarily implements \nmaximum likelihood\n methods, but it can also be used to perform some forms of Bayesian inference (e.g. \nFUBAR\n), fit Bayesian graphical models to data, run genetic algorithms to perform complex model selection.\n\n\nFeatures\n#\n\n\n\n\nSupport for arbitrary sequence data, including nucleotide, amino-acid, codon, binary, count (microsattelite) data, including multiple partitions mixing differen data types. \n\n\nComplex models of rate variation, including site-to-site, branch-to-branch, hidden markov model (autocorrelated rates), between/within partitions, and co-varion type models.\n\n\nFast numerical fitting routines, supporting parallel and distributed execution.\n\n\nA broad collection of pre-defined evolutionary models. \n\n\nThe ability to specify flexible constraints on model parameters and estimate confidence intervals on MLEs.\n\n\nAncestral sequence reconstruction and sampling. \n\n\nSimulate data from any model that can be defined and fitted in the language.\n\n\nApply unique (for this domain) machine learning methods to discover patterns in the data, e.g. genetic algorithms, stochastic context free grammars, Bayesian graphical models.\n\n\nScript analyses completely in HBL including flow control, I/O, parallelization, etc.\n\n\n(v2.3) Modern web-applications for interactive result visualization.\n\n\n\n\nExample HBL Script\n#\n\n\n/* \n\n\n   This is an example HYPHY Batch File.\n\n\n   It reads in a MEGA format nucleotide dataset from data/hiv.nuc.\n\n\n   and fits the F81 model using the tree inclded in the file using maximum likelihood.\n\n\n   Output is printed out as a Newick Style tree with branch lengths\n\n\n   representing the number of expected substitutions per branch.\n\n\n*/\n\n\n\n// 1. Read in the data and store the result in a DataSet variable\n\n\n\nDataSet\n         \nnucleotideSequences\n \n=\n \nReadDataFile\n \n(\ndata/hiv.nuc\n);\n\n\n\n// 2. Filter the data, specifying that all of the data is to be used\n\n\n//  and that it is to be treated as nucleotides.*/\n\n\n\nDataSetFilter\n   \nfilteredData\n \n=\n \nCreateFilter\n \n(\nnucleotideSequences\n,\n1\n);\n\n\n\n// Collect observed nucleotide frequencies from the filtered data. observedFreqs will\n\n\n// store receieve the vector of frequencies. \n\n\n\nHarvestFrequencies\n \n(\nobservedFreqs\n,\n \nfilteredData\n,\n \n1\n,\n \n1\n,\n \n1\n);\n\n\n\n// Define the F81 substitution matrix. \n*\n is defined to be -(sum of off-diag row \n\n\n// elements); mu is the rate*time parameter \n\n\n\nF81RateMatrix\n \n=\n \n        \n{{\n*\n,\nmu\n,\nmu\n,\nmu\n}\n\n         \n{\nmu\n,\n*\n,\nmu\n,\nmu\n}\n\n         \n{\nmu\n,\nmu\n,\n*\n,\nmu\n}\n\n         \n{\nmu\n,\nmu\n,\nmu\n,\n*\n}};\n\n\n\n//  Define the F81 models, by combining the substitution matrix with the vector of observed (equilibrium) frequencies.\n\n\n\nModel\n   \nF81\n \n=\n \n(\nF81RateMatrix\n,\n \nobservedFreqs\n);\n\n\n\n// Now we can define the tree variable, using the tree string read from the data file, \n\n\n// and, by default, assigning the last defined model (F81) to all tree branches.\n\n\n\nTree\n    \ngivenTree\n \n=\n \nDATAFILE_TREE\n;\n\n\n\n// Since all the likelihood function ingredients (data, tree, equilibrium frequencies)\n\n\n// have been defined we are ready to construct the likelihood function.\n\n\n\nLikelihoodFunction\n  \nLF\n \n=\n \n(\nfilteredData\n,\n \ngivenTree\n);\n\n\n\n// Maximize the likelihood function, storing parameter values in the matrix paramValues \n\n\n\nOptimize\n \n(\nparamValues\n,\n \nLF\n);\n\n\n\n// Print the tree with optimal branch lengths to the console. \n\n\n\nfprintf\n  \n(\nstdout\n,\n \nLF\n);", 
            "title": "About"
        }, 
        {
            "location": "/about/#overview", 
            "text": "HyPhy ( Hy pothesis Testing using  Phy logenies) is an open-source software package for the analysis of genetic sequences (in particular the inference of natural selection) using techniques in phylogenetics, molecular evolution, and machine learning. It features a rich scripting language for limitless customization of analyses. Additionally, HyPhy features support for parallel computing environments (via message passing interface). HyPhy has over 10000 registered users and has been cited in over 1800 peer-reviewed publications ( Google Scholar ).", 
            "title": "Overview"
        }, 
        {
            "location": "/about/#brief-history", 
            "text": "HyPhy grew out of the collaboration between  Spencer Muse  and  Sergei Kosakovsky Pond  that commenced in 1997 and continues to this day, with many additional collaborators, including  Art Poon ,  Simon Frost ,  Steven Weaver ,  Stephanie Spielman ,  Lance Hepler ,  Martin Smith ,  Konrad Scheffler ,  Wayne Delport ,  Ben Murrell , and  Joel Wertheim . HyPhy was originally released in 2000, is currently at version 2.3, and is presently undergoing a major rewrite, with version v3.0 planned for release in 2018.", 
            "title": "Brief history"
        }, 
        {
            "location": "/about/#design-philosophy", 
            "text": "HyPhy was designed to allow the specification and fitting of a broad class of continuous-time discrete-space Markov models of sequence evolution. To implement these models, HyPhy provides its own scripting language -  HBL , or  HyPhy Batch Language  (see  an example ), which can be used to develop custom analyses or modify existing ones. Importantly, it is not necessary to learn (or even be aware of) HBL in order to use HyPhy, as most common models and analyses have been implemented for user convenience. Once a model is defined, it can be fitted to data (using a fixed topology tree), its parameters can be constrained in user-defined ways to test various hypotheses (e.g. is rate1   rate2), and simulate data from. HyPhy primarily implements  maximum likelihood  methods, but it can also be used to perform some forms of Bayesian inference (e.g.  FUBAR ), fit Bayesian graphical models to data, run genetic algorithms to perform complex model selection.", 
            "title": "Design philosophy"
        }, 
        {
            "location": "/about/#features", 
            "text": "Support for arbitrary sequence data, including nucleotide, amino-acid, codon, binary, count (microsattelite) data, including multiple partitions mixing differen data types.   Complex models of rate variation, including site-to-site, branch-to-branch, hidden markov model (autocorrelated rates), between/within partitions, and co-varion type models.  Fast numerical fitting routines, supporting parallel and distributed execution.  A broad collection of pre-defined evolutionary models.   The ability to specify flexible constraints on model parameters and estimate confidence intervals on MLEs.  Ancestral sequence reconstruction and sampling.   Simulate data from any model that can be defined and fitted in the language.  Apply unique (for this domain) machine learning methods to discover patterns in the data, e.g. genetic algorithms, stochastic context free grammars, Bayesian graphical models.  Script analyses completely in HBL including flow control, I/O, parallelization, etc.  (v2.3) Modern web-applications for interactive result visualization.", 
            "title": "Features"
        }, 
        {
            "location": "/about/#example-hbl-script", 
            "text": "/*      This is an example HYPHY Batch File.     It reads in a MEGA format nucleotide dataset from data/hiv.nuc.     and fits the F81 model using the tree inclded in the file using maximum likelihood.     Output is printed out as a Newick Style tree with branch lengths     representing the number of expected substitutions per branch.  */  // 1. Read in the data and store the result in a DataSet variable  DataSet           nucleotideSequences   =   ReadDataFile   ( data/hiv.nuc );  // 2. Filter the data, specifying that all of the data is to be used  //  and that it is to be treated as nucleotides.*/  DataSetFilter     filteredData   =   CreateFilter   ( nucleotideSequences , 1 );  // Collect observed nucleotide frequencies from the filtered data. observedFreqs will  // store receieve the vector of frequencies.   HarvestFrequencies   ( observedFreqs ,   filteredData ,   1 ,   1 ,   1 );  // Define the F81 substitution matrix.  *  is defined to be -(sum of off-diag row   // elements); mu is the rate*time parameter   F81RateMatrix   =  \n         {{ * , mu , mu , mu } \n          { mu , * , mu , mu } \n          { mu , mu , * , mu } \n          { mu , mu , mu , * }};  //  Define the F81 models, by combining the substitution matrix with the vector of observed (equilibrium) frequencies.  Model     F81   =   ( F81RateMatrix ,   observedFreqs );  // Now we can define the tree variable, using the tree string read from the data file,   // and, by default, assigning the last defined model (F81) to all tree branches.  Tree      givenTree   =   DATAFILE_TREE ;  // Since all the likelihood function ingredients (data, tree, equilibrium frequencies)  // have been defined we are ready to construct the likelihood function.  LikelihoodFunction    LF   =   ( filteredData ,   givenTree );  // Maximize the likelihood function, storing parameter values in the matrix paramValues   Optimize   ( paramValues ,   LF );  // Print the tree with optimal branch lengths to the console.   fprintf    ( stdout ,   LF );", 
            "title": "Example HBL Script"
        }, 
        {
            "location": "/register/", 
            "text": "input[type=\"radio\"]{\n            -webkit-appearance: radio;\n    }\n    label.title{\n        font-weight: bold;\n    }\n\n\n\n\n\n\n        \n\n            If you have already registered, or wish to postpone or skip registration, you may proceed directly\n            to the \ndownload\n page.\n        \n\n\n        \n\n            \nPlease take your time to fill out all the relevant information in the form below.\n            If you register, we will be able to notify you of code updates and other news. Additionally, we would \n            like to know how people use HYPHY, so we can add and improve the features of the package.\n\n        \n\n\n\n\n        \n\n      \nemail address\n\n      \n\n        \n\n\n        \n\n            \nInstitution\n\n            \n\n        \n\n\n        \n\n\n      \nWhat do you mainly use HyPhy for?\n\n\n            \n\n                \n\n                Selection Analysis\n            \n\n\n            \n\n                \n\n                Model Development\n            \n\n\n            \n\n                \n\n                Other\n            \n\n\n    \n\n\n        \n\n            \nHave you cited HyPhy results in a publication?\n\n\n            \n\n                \n\n                Yes\n            \n\n\n            \n\n                \n\n                No\n            \n\n\n        \n\n\n        \n\n            \nHow did you first find out about HyPhy?\n\n            \n\n                \n\n                \nColleague\n\n                \nMailing List\n\n                \nSoftware Listing Page\n\n                \nSearch Engine (i.e. Google)\n\n                \nPublication\n\n                \nConference/Seminar\n\n                \nOther\n\n            \n       \n        \n\n\n    \n\n    \nSubmit", 
            "title": "Download"
        }, 
        {
            "location": "/download/", 
            "text": "Download and Install GUI\n#\n\n\nTo download the Desktop/GUI version of HyPhy, follow instructions on this \ndownload page\n. \n\n\n\n\nNOTE\n: The HyPhy GUI is no longer maintained and will be replaced in the near future with a JavaScript front-end. For those interested in a GUI experience, we recommend using HyPhy either via \nDatamonkey\n (for newer methods see \nthe development version of Datamonkey\n) or from the command line on your local computer/server. \n\n\n\n\nAlternatively, you may download an installer for the final prebuilt release of HyPhy (version 2.2.4) for your specific operating system using the appropriate link:\n\n\n\n\nMac OSX\n\n\nWindows XP or later\n\n\n\n\nDownload and Install from source\n#\n\n\n\n\nHyPhy depends on \nCMake version 3 or later\n for its build system. Before installing HyPhy, please make sure that an appropriate version of \nCMake\n has been installed. Some HyPhy configurations also depends on other development libraries like \nlibcurl\n and  \nlibpthread\n. \nLibcurl\n requires development libraries such as  \ncrypto++\n and  \nopenssl\n (or  \ngnutls\n depending on your configuration). On Ubuntu these are  \nlibcurl-dev\n,  \nlibcrypto++-dev\n and  \nlibssl-dev\n.\n\n\n\n\nYou can obtain HyPhy source in two ways:\n\n\n\n\nDownload a specific HyPhy release (we recommend the latest release) from \nthe HyPhy github repository\n.\n\n\nDownload the master branch of HyPhy by cloning the repository by entering this command into a terminal session:\n\n\n\n\ngit clone git@github.com:veg/hyphy.git\n\n\n\n\n\nOnce you have downloaded HyPhy, follow these \ninstallation instructions\n.\n\n\nDevelopment version\n#\n\n\n\n\nCaution\n: For advanced users only.\n\n\n\n\nThe most recent (not necessarily stable, but containing the latest features) versions of HyPhy can be obtained by checking out the \nv2.3-dev\n branch, by entering this command into a terminal session before proceeding with the install process\n\n\n    git checkout v2.3-dev", 
            "title": "_Real_Download"
        }, 
        {
            "location": "/download/#download-and-install-gui", 
            "text": "To download the Desktop/GUI version of HyPhy, follow instructions on this  download page .    NOTE : The HyPhy GUI is no longer maintained and will be replaced in the near future with a JavaScript front-end. For those interested in a GUI experience, we recommend using HyPhy either via  Datamonkey  (for newer methods see  the development version of Datamonkey ) or from the command line on your local computer/server.    Alternatively, you may download an installer for the final prebuilt release of HyPhy (version 2.2.4) for your specific operating system using the appropriate link:   Mac OSX  Windows XP or later", 
            "title": "Download and Install GUI"
        }, 
        {
            "location": "/download/#download-and-install-from-source", 
            "text": "HyPhy depends on  CMake version 3 or later  for its build system. Before installing HyPhy, please make sure that an appropriate version of  CMake  has been installed. Some HyPhy configurations also depends on other development libraries like  libcurl  and   libpthread .  Libcurl  requires development libraries such as   crypto++  and   openssl  (or   gnutls  depending on your configuration). On Ubuntu these are   libcurl-dev ,   libcrypto++-dev  and   libssl-dev .   You can obtain HyPhy source in two ways:   Download a specific HyPhy release (we recommend the latest release) from  the HyPhy github repository .  Download the master branch of HyPhy by cloning the repository by entering this command into a terminal session:   git clone git@github.com:veg/hyphy.git  Once you have downloaded HyPhy, follow these  installation instructions .", 
            "title": "Download and Install from source"
        }, 
        {
            "location": "/download/#development-version", 
            "text": "Caution : For advanced users only.   The most recent (not necessarily stable, but containing the latest features) versions of HyPhy can be obtained by checking out the  v2.3-dev  branch, by entering this command into a terminal session before proceeding with the install process      git checkout v2.3-dev", 
            "title": "Development version"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n#\n\n\n\n\nBefore continuing, please \nregister and download HyPhy\n.\n\n\n\n\nOnce downloaded, install HyPhy as follows:\n\n\n\n\n\n\nNavigate to the newly downloaded/cloned HyPhy directory\n\n\ncd hyphy\n\n\n\n\n\n\n\n\n\nConfigure HyPhy using \nCMake\n\n\ncmake .\n\n\n\n\n\n\n\n\n\nBy default, HyPhy will be installed into \n/usr/local/\n, but it can be installed on any location of your system by specifying a custom installation path:\n\n\ncmake -DINSTALL_PREFIX=/location/of/choice .\n\n\n\n\n\n\n\n\n\nIf you prefer to use other build systems \nsupported by CMake\n, such as \nXCode\n, configure HyPhy using the generator (\n-G\n) switch:\n\n\ncmake -G Xcode .\n\n\n\n\n\n\n\n\n\nIf would like to specify a particular C/C++ compiler (please note that it must support the C++-14 language standard) for your HyPhy build, use this command:\n\n\ncmake . -DCMAKE_CXX_COMPILER=/path/to/C++-compiler -DCMAKE_C_COMPILER=/path/to/C-compiler\n\n\n\n\n\n\n\n\n\n\n\n\n\nIf you are building HyPhy under MacOS X, you can specify which version of SDK to use, for example:\n\n\n    cmake -DCMAKE_OSX_SYSROOT=/Developer/SDKs/MacOSX10.9.sdk/ .\n\n\n\n\n\n\n\n\n\nBuild HyPhy by running \nmake\n with one of the following build targets given below. For example, to install the executable \nHYPHYMP\n, you would enter the following command:\n\n\nmake MP2\n\n\n\n\n\n\n\n\n\nMP2/MP\n - build a HyPhy executable (\nHYPHYMP\n) using \nOpenMP\n to support symmetric multiprocessing. If \nOpenMP\n is not installed or not supported by the compiler (e.g. LLVM), the compiled executable will not support multi-threading. You can confirm  case by examining the output from running \ncmake\n. If \nopenMP\n is installed, you should see something similar to the following in the output:\n\n\n-- Performing Test OpenMP_FLAG_DETECTED\n-- Performing Test OpenMP_FLAG_DETECTED - Success\n-- Try OpenMP CXX flag = [-fopenmp]\n-- Performing Test OpenMP_FLAG_DETECTED\n-- Performing Test OpenMP_FLAG_DETECTED - Success\n-- Found OpenMP: -fopenmp\n\n\n\n\n\n\n\n\n\nMPI\n - build a HyPhy executable (\nHYPHYMPI\n) using the message passing interface \nMPI\n to support parallel execution on distributed systems (clusters). An MPI library (e.g., OpenMPI) must be installed and available in your path. You can check if this is the case by examining the output from running \ncmake\n. If \nopenMPI\n is installed, you should see something similar to the following in the output:\n\n\n    \n--\n \nFound\n \nMPI_C\n:\n \n/\nopt\n/\nscyld\n/\nopenmpi\n/\n1\n.\n6\n.\n3\n/\ngnu\n/\nlib\n/\nlibmpi\n.\nso\n;/\nusr\n/\nlib64\n/\nlibibverbs\n.\nso\n;/\nusr\n/\nlib64\n/\nlibdat\n.\nso\n;/\nusr\n/\nlib64\n/\nlibrt\n.\nso\n;/\nusr\n/\nlib64\n/\nlibnsl\n.\nso\n;/\nusr\n/\nlib64\n/\nlibutil\n.\nso\n;/\nusr\n/\nlib64\n/\nlibm\n.\nso\n;/\nusr\n/\nlib64\n/\nlibtorque\n.\nso\n;/\nusr\n/\nlib64\n/\nlibm\n.\nso\n;/\nusr\n/\nlib64\n/\nlibnuma\n.\nso\n;/\nusr\n/\nlib64\n/\nlibrt\n.\nso\n;/\nusr\n/\nlib64\n/\nlibnsl\n.\nso\n;/\nusr\n/\nlib64\n/\nlibutil\n.\nso\n;/\nusr\n/\nlib64\n/\nlibm\n.\nso\n\n\n    \n--\n \nFound\n \nMPI_CXX\n:\n \n/\nopt\n/\nscyld\n/\nopenmpi\n/\n1\n.\n6\n.\n3\n/\ngnu\n/\nlib\n/\nlibmpi_cxx\n.\nso\n;/\nopt\n/\nscyld\n/\nopenmpi\n/\n1\n.\n6\n.\n3\n/\ngnu\n/\nlib\n/\nlibmpi\n.\nso\n;/\nusr\n/\nlib64\n/\nlibibverbs\n.\nso\n;/\nusr\n/\nlib64\n/\nlibdat\n.\nso\n;/\nusr\n/\nlib64\n/\nlibrt\n.\nso\n;/\nusr\n/\nlib64\n/\nlibnsl\n.\nso\n;/\nusr\n/\nlib64\n/\nlibutil\n.\nso\n;/\nusr\n/\nlib64\n/\nlibm\n.\nso\n;/\nusr\n/\nlib64\n/\nlibtorque\n.\nso\n;/\nusr\n/\nlib64\n/\nlibm\n.\nso\n;/\nusr\n/\nlib64\n/\nlibnuma\n.\nso\n;/\nusr\n/\nlib64\n/\nlibrt\n.\nso\n;/\nusr\n/\nlib64\n/\nlibnsl\n.\nso\n;/\nusr\n/\nlib64\n/\nlibutil\n.\nso\n;/\nusr\n/\nlib64\n/\nlibm\n.\nso\n\n\n\n\n\n\n\n\n\n\nLIB\n - build a HyPhy library (libhyphy_mp), optionally using OpenMP (see above) to support multiprocessing\n\n\n\n\n\n\n\n\n\n\nFinally, install HyPhy on your system with the command\n\n\nmake install\n\n\n\n\n\nHyPhy will install either in its default location \n/usr/local/\n, or in any custom  \n/location/of/choice/\n provided when configuring \nCMake\n.\n\n\n\n\nHYPHYMP(I)\n will be installed at  \n/location/of/choice/bin\n\n\nlibhyphy_mp.(so/dylib/dll)\n will be installed at \n/location/of/choice/lib\n\n\nHyPhy's standard library of scripts/batchfiles will go into \n/location/of/choice/lib/hyphy", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Before continuing, please  register and download HyPhy .   Once downloaded, install HyPhy as follows:    Navigate to the newly downloaded/cloned HyPhy directory  cd hyphy    Configure HyPhy using  CMake  cmake .    By default, HyPhy will be installed into  /usr/local/ , but it can be installed on any location of your system by specifying a custom installation path:  cmake -DINSTALL_PREFIX=/location/of/choice .    If you prefer to use other build systems  supported by CMake , such as  XCode , configure HyPhy using the generator ( -G ) switch:  cmake -G Xcode .    If would like to specify a particular C/C++ compiler (please note that it must support the C++-14 language standard) for your HyPhy build, use this command:  cmake . -DCMAKE_CXX_COMPILER=/path/to/C++-compiler -DCMAKE_C_COMPILER=/path/to/C-compiler      If you are building HyPhy under MacOS X, you can specify which version of SDK to use, for example:      cmake -DCMAKE_OSX_SYSROOT=/Developer/SDKs/MacOSX10.9.sdk/ .    Build HyPhy by running  make  with one of the following build targets given below. For example, to install the executable  HYPHYMP , you would enter the following command:  make MP2    MP2/MP  - build a HyPhy executable ( HYPHYMP ) using  OpenMP  to support symmetric multiprocessing. If  OpenMP  is not installed or not supported by the compiler (e.g. LLVM), the compiled executable will not support multi-threading. You can confirm  case by examining the output from running  cmake . If  openMP  is installed, you should see something similar to the following in the output:  -- Performing Test OpenMP_FLAG_DETECTED\n-- Performing Test OpenMP_FLAG_DETECTED - Success\n-- Try OpenMP CXX flag = [-fopenmp]\n-- Performing Test OpenMP_FLAG_DETECTED\n-- Performing Test OpenMP_FLAG_DETECTED - Success\n-- Found OpenMP: -fopenmp    MPI  - build a HyPhy executable ( HYPHYMPI ) using the message passing interface  MPI  to support parallel execution on distributed systems (clusters). An MPI library (e.g., OpenMPI) must be installed and available in your path. You can check if this is the case by examining the output from running  cmake . If  openMPI  is installed, you should see something similar to the following in the output:       --   Found   MPI_C :   / opt / scyld / openmpi / 1 . 6 . 3 / gnu / lib / libmpi . so ;/ usr / lib64 / libibverbs . so ;/ usr / lib64 / libdat . so ;/ usr / lib64 / librt . so ;/ usr / lib64 / libnsl . so ;/ usr / lib64 / libutil . so ;/ usr / lib64 / libm . so ;/ usr / lib64 / libtorque . so ;/ usr / lib64 / libm . so ;/ usr / lib64 / libnuma . so ;/ usr / lib64 / librt . so ;/ usr / lib64 / libnsl . so ;/ usr / lib64 / libutil . so ;/ usr / lib64 / libm . so \n\n     --   Found   MPI_CXX :   / opt / scyld / openmpi / 1 . 6 . 3 / gnu / lib / libmpi_cxx . so ;/ opt / scyld / openmpi / 1 . 6 . 3 / gnu / lib / libmpi . so ;/ usr / lib64 / libibverbs . so ;/ usr / lib64 / libdat . so ;/ usr / lib64 / librt . so ;/ usr / lib64 / libnsl . so ;/ usr / lib64 / libutil . so ;/ usr / lib64 / libm . so ;/ usr / lib64 / libtorque . so ;/ usr / lib64 / libm . so ;/ usr / lib64 / libnuma . so ;/ usr / lib64 / librt . so ;/ usr / lib64 / libnsl . so ;/ usr / lib64 / libutil . so ;/ usr / lib64 / libm . so     LIB  - build a HyPhy library (libhyphy_mp), optionally using OpenMP (see above) to support multiprocessing      Finally, install HyPhy on your system with the command  make install  HyPhy will install either in its default location  /usr/local/ , or in any custom   /location/of/choice/  provided when configuring  CMake .   HYPHYMP(I)  will be installed at   /location/of/choice/bin  libhyphy_mp.(so/dylib/dll)  will be installed at  /location/of/choice/lib  HyPhy's standard library of scripts/batchfiles will go into  /location/of/choice/lib/hyphy", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/", 
            "text": "Using HyPhy\n#\n\n\nThere are four ways to use HyPhy:\n\n\nRun HyPhy on our accompanying Datamonkey webserver\n#\n\n\nThis option is the \neasiest\n, \nsupports most popular analyses\n, and \ndoes not require use of the command line\n. Access Datamonkey \nhere\n, or see this \ndevelopment version of Datamonkey\n for newer methods and a dramatically better user experience.\n\n\nRun HyPhy from the command line\n#\n\n\nThis option is the \nmost flexible\n approach through which you can access \nall available analyses and pipelines\n as well as \ncustomize\n your own HyPhy analyses. Follow \nthese instructions\n for download and installation. \n\n\nRun HyPhy custom analyses without the command line\n#\n\n\nRun a legacy graphical user interface version of HyPhy (no longer developed, but still supporting many popular analyses) Mac OS X or Windows. Follow \nthese instructions\n for download and installation.\n\n\nUse HyPhy for software/pipeline development\n#\n\n\nCompile HyPhy as a library that can be accessed via Python, R, or other language bindings. Follow \nthese instructions\n for download and installation. \n\n\nTypical uses of HyPhy\n#\n\n\nHyPhy ships with a library of \nstandard analyses\n that implement ~100 different methods from start to finish. HyPhy is most commonly used for \ncharacterizing the evolutionary process\n, in particular:\n\n\n\n\nDetecting signatures of selection\n\n\nEstimating evolutionary rates\n\n\nComparing different evolutionary models\n\n\nFitting custom models to sequence alignments\n\n\n\n\nCharacterizing selective pressures\n#\n\n\nHyPhy provides a suite of diverse phylogenetic methodologies for testing specific hypotheses about selection in protein-coding and/or amino-acid multiple sequence alignments. Which method you select will depend on your specific question. Below we recommend several methods for different purposes, linked to more in depth descriptions. Tutorials for using these methods are also available \nhere\n. \n\n\n\n\nNote that you may find it useful to perform pre-processing on your dataset, specifically by screening for recombination breakpoints using our \nGARD\n (\nG\nenetic \nA\nlgorithm for \nR\necombination \nD\netection) method before proceeding to selection analysis.\n\n\n\n\nAre individual sites subject to \npervasive\n (across the whole phylogeny) positive or purifying selection?\n#\n\n\n\n\nFEL\n (\nF\nixed \nE\nfects \nL\nikelihood) is suitable for small-to-medium sized data sets.\n\n\nSLAC\n (\nS\ningle-\nL\nikelihood \nA\nncestor \nC\nounting) is an approximate method with accuracy similar to FEL, but suitable for larger datasets. However, SLAC is not suitable for highly-diverged sequences.\n\n\nFUBAR\n (\nF\nast, \nU\nnconstrained \nB\nayesian \nA\npp\nR\noximation) is suitable for medium-to-large data sets and is expected to have more power than FEL for detecting pervasive selection at sites. \nFUBAR is the preferred approach for inferring pervasive selection.\n\n\n\n\nAre individual sites subject to \nepisodic\n (at a subset of branches) positive or purifying selection?\n#\n\n\n\n\nMEME\n (\nM\nixed \nE\nffects \nM\nodel of \nE\nvolution) tests for episodic selection at individual sites. Note that MEME does not accept \na priori\n branch specifications (this feature is being introduced with \nv2.3-dev\n and later). \nMEME is the preferred approach for detecting positive selection at individual sites.\n\n\n\n\nAre individual branches subject to \nepisodic\n (at a subset of sites) positive or purifying selection?\n#\n\n\n\n\naBSREL\n (\na\ndaptive \nB\nranch-\nS\nite \nR\nandom \nE\nffects \nL\nikelihood) is an improved version of the common \"branch-site\" class of models. aBSREL allows either for \na priori\n specification of branch(es) to test for selection, or can test each lineage for selection in an exploratory fashion. Note that the exploratory approach will sacrifice power. \naBSREL is the preferred approach for detecting positive selection at individual branches.\n\n\n\n\nHas a gene experienced positive selection at any site on a particular branch or set of branches?\n#\n\n\n\n\nBUSTED\n (\nB\nranch-\nS\nite \nU\nnrestricted \nS\ntatistical \nT\nest for \nE\npisodic \nD\niversification) will test for gene-wide selection at pre-specified lineages. This method is particularly useful for relatively small datasets (fewer than 10 taxa) where other methods may not have sufficient power to detect selection. \nThis method is not suitable for identifying specific sites subject to positive seleciton.\n\n\n\n\nHas gene-wide selection pressure been relaxed or intensified along a certain subset of branches?\n#\n\n\n\n\nRELAX\n tests for a relaxation (e.g. where purifying selection has become less stringent) or an intensification (e.g. where purifying selection has become stronger) of selection pressures along a specified set of \"test\" branches. \nThis method is not suitable for detecting positive selection.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/getting-started/#using-hyphy", 
            "text": "There are four ways to use HyPhy:", 
            "title": "Using HyPhy"
        }, 
        {
            "location": "/getting-started/#run-hyphy-on-our-accompanying-datamonkey-webserver", 
            "text": "This option is the  easiest ,  supports most popular analyses , and  does not require use of the command line . Access Datamonkey  here , or see this  development version of Datamonkey  for newer methods and a dramatically better user experience.", 
            "title": "Run HyPhy on our accompanying Datamonkey webserver"
        }, 
        {
            "location": "/getting-started/#run-hyphy-from-the-command-line", 
            "text": "This option is the  most flexible  approach through which you can access  all available analyses and pipelines  as well as  customize  your own HyPhy analyses. Follow  these instructions  for download and installation.", 
            "title": "Run HyPhy from the command line"
        }, 
        {
            "location": "/getting-started/#run-hyphy-custom-analyses-without-the-command-line", 
            "text": "Run a legacy graphical user interface version of HyPhy (no longer developed, but still supporting many popular analyses) Mac OS X or Windows. Follow  these instructions  for download and installation.", 
            "title": "Run HyPhy custom analyses without the command line"
        }, 
        {
            "location": "/getting-started/#use-hyphy-for-softwarepipeline-development", 
            "text": "Compile HyPhy as a library that can be accessed via Python, R, or other language bindings. Follow  these instructions  for download and installation.", 
            "title": "Use HyPhy for software/pipeline development"
        }, 
        {
            "location": "/getting-started/#typical-uses-of-hyphy", 
            "text": "HyPhy ships with a library of  standard analyses  that implement ~100 different methods from start to finish. HyPhy is most commonly used for  characterizing the evolutionary process , in particular:   Detecting signatures of selection  Estimating evolutionary rates  Comparing different evolutionary models  Fitting custom models to sequence alignments", 
            "title": "Typical uses of HyPhy"
        }, 
        {
            "location": "/getting-started/#characterizing-selective-pressures", 
            "text": "HyPhy provides a suite of diverse phylogenetic methodologies for testing specific hypotheses about selection in protein-coding and/or amino-acid multiple sequence alignments. Which method you select will depend on your specific question. Below we recommend several methods for different purposes, linked to more in depth descriptions. Tutorials for using these methods are also available  here .    Note that you may find it useful to perform pre-processing on your dataset, specifically by screening for recombination breakpoints using our  GARD  ( G enetic  A lgorithm for  R ecombination  D etection) method before proceeding to selection analysis.", 
            "title": "Characterizing selective pressures"
        }, 
        {
            "location": "/getting-started/#are-individual-sites-subject-to-pervasive-across-the-whole-phylogeny-positive-or-purifying-selection", 
            "text": "FEL  ( F ixed  E fects  L ikelihood) is suitable for small-to-medium sized data sets.  SLAC  ( S ingle- L ikelihood  A ncestor  C ounting) is an approximate method with accuracy similar to FEL, but suitable for larger datasets. However, SLAC is not suitable for highly-diverged sequences.  FUBAR  ( F ast,  U nconstrained  B ayesian  A pp R oximation) is suitable for medium-to-large data sets and is expected to have more power than FEL for detecting pervasive selection at sites.  FUBAR is the preferred approach for inferring pervasive selection.", 
            "title": "Are individual sites subject to pervasive (across the whole phylogeny) positive or purifying selection?"
        }, 
        {
            "location": "/getting-started/#are-individual-sites-subject-to-episodic-at-a-subset-of-branches-positive-or-purifying-selection", 
            "text": "MEME  ( M ixed  E ffects  M odel of  E volution) tests for episodic selection at individual sites. Note that MEME does not accept  a priori  branch specifications (this feature is being introduced with  v2.3-dev  and later).  MEME is the preferred approach for detecting positive selection at individual sites.", 
            "title": "Are individual sites subject to episodic (at a subset of branches) positive or purifying selection?"
        }, 
        {
            "location": "/getting-started/#are-individual-branches-subject-to-episodic-at-a-subset-of-sites-positive-or-purifying-selection", 
            "text": "aBSREL  ( a daptive  B ranch- S ite  R andom  E ffects  L ikelihood) is an improved version of the common \"branch-site\" class of models. aBSREL allows either for  a priori  specification of branch(es) to test for selection, or can test each lineage for selection in an exploratory fashion. Note that the exploratory approach will sacrifice power.  aBSREL is the preferred approach for detecting positive selection at individual branches.", 
            "title": "Are individual branches subject to episodic (at a subset of sites) positive or purifying selection?"
        }, 
        {
            "location": "/getting-started/#has-a-gene-experienced-positive-selection-at-any-site-on-a-particular-branch-or-set-of-branches", 
            "text": "BUSTED  ( B ranch- S ite  U nrestricted  S tatistical  T est for  E pisodic  D iversification) will test for gene-wide selection at pre-specified lineages. This method is particularly useful for relatively small datasets (fewer than 10 taxa) where other methods may not have sufficient power to detect selection.  This method is not suitable for identifying specific sites subject to positive seleciton.", 
            "title": "Has a gene experienced positive selection at any site on a particular branch or set of branches?"
        }, 
        {
            "location": "/getting-started/#has-gene-wide-selection-pressure-been-relaxed-or-intensified-along-a-certain-subset-of-branches", 
            "text": "RELAX  tests for a relaxation (e.g. where purifying selection has become less stringent) or an intensification (e.g. where purifying selection has become stronger) of selection pressures along a specified set of \"test\" branches.  This method is not suitable for detecting positive selection.", 
            "title": "Has gene-wide selection pressure been relaxed or intensified along a certain subset of branches?"
        }, 
        {
            "location": "/resources/", 
            "text": "Resources\n#\n\n\nGeneral\n#\n\n\n\n\n\n\nTutorials\n for using HyPhy to infer selection with various methods. Detailed descriptions of these methods are available \nhere\n.\n\n\n\n\n\n\nBook chapters and Powerpoints detailing HyPhy usage:\n\n\n\n\nQuantifying Natural Selection in Coding Sequences (2016)\n \n\n\nHyPhy Book: Estimating selection pressures on alignments of\ncoding sequences (2007)\n\n\nIntroduction: Compartmentalization Detection\n \n\n\n\n\n\n\n\n\nGetting help\n\n\n\n\nSee the current \nGithub Issues\n page for posting questions or searching queries from other users.\n\n\nThe retired (as of 2014) user forum is also available for viewing \nhere\n.\n\n\nYou can also tweet us at \n@hyphy_software\n with quick questions.\n\n\n\n\n\n\n\n\nLabeling branches with phylotree\n#\n\n\nLabeling phylogenies is critical for branch-level analyses such as RELAX and BUSTED. These instructions detail the most basic usage of the \nphylotree.js\n widget's branch labeling functionality. \n\n\n\n\nUpload your phylogeny.\n\n\nClick the \nNewick\n dropdown menu at the top left of the site and choose your newick-formatted phylogeny to upload. Once uploaded, the phylogeny will load in the widget for labeling and/or manipulation.\n\n\n\n\n\n\nIn the text box next to the \nTag\n dropdown menu, create all of your labels \nbefore selecting/highlighting any branches\n. \n\n\nBy default, the first label will always be named \nForeground\n. This can be renamed with \nTag-\nRename selection set\n as desired. Be sure to click \nSave\n when finished renaming!\n\n\nTo additional more labels, click \nTag-\nNew selection set\n. Each new selection set will be named, by default, \nnew_selection_name\n. You can change this name now by directly typing the new name into the text field next to the \nTag\n button. Again, click \nSave\n when finished renaming.\n\n\n\n\n\n\n\n\nAfter all labels have been created, they will be visible in differently-colored text under the \nTag\n dropdown menu. To select branches for a label, follow these steps:\n\n\n\n\nClick the label of interest in the \nTag\n dropdown menu. The name of your chosen label will now be shown in the text box to the right of \nTag\n. \n\n\nHighlight and select any branches for this label. \n\n\nWhen finished, navigate back to \nTag\n to select the next label of interest, and select branches accordingly. Proceed until all selections are complete.\n\n\n\n\n\n\n\n\nExport your labeled phylogeny by clicking the \nNewick\n dropdown menu and then \nExport\n. A text box with your labeled newick tree will appear. Copy and paste this newick tree as needed.", 
            "title": "Resources and help"
        }, 
        {
            "location": "/resources/#resources", 
            "text": "", 
            "title": "Resources"
        }, 
        {
            "location": "/resources/#general", 
            "text": "Tutorials  for using HyPhy to infer selection with various methods. Detailed descriptions of these methods are available  here .    Book chapters and Powerpoints detailing HyPhy usage:   Quantifying Natural Selection in Coding Sequences (2016)    HyPhy Book: Estimating selection pressures on alignments of\ncoding sequences (2007)  Introduction: Compartmentalization Detection       Getting help   See the current  Github Issues  page for posting questions or searching queries from other users.  The retired (as of 2014) user forum is also available for viewing  here .  You can also tweet us at  @hyphy_software  with quick questions.", 
            "title": "General"
        }, 
        {
            "location": "/resources/#labeling-branches-with-phylotree", 
            "text": "Labeling phylogenies is critical for branch-level analyses such as RELAX and BUSTED. These instructions detail the most basic usage of the  phylotree.js  widget's branch labeling functionality.    Upload your phylogeny.  Click the  Newick  dropdown menu at the top left of the site and choose your newick-formatted phylogeny to upload. Once uploaded, the phylogeny will load in the widget for labeling and/or manipulation.    In the text box next to the  Tag  dropdown menu, create all of your labels  before selecting/highlighting any branches .   By default, the first label will always be named  Foreground . This can be renamed with  Tag- Rename selection set  as desired. Be sure to click  Save  when finished renaming!  To additional more labels, click  Tag- New selection set . Each new selection set will be named, by default,  new_selection_name . You can change this name now by directly typing the new name into the text field next to the  Tag  button. Again, click  Save  when finished renaming.     After all labels have been created, they will be visible in differently-colored text under the  Tag  dropdown menu. To select branches for a label, follow these steps:   Click the label of interest in the  Tag  dropdown menu. The name of your chosen label will now be shown in the text box to the right of  Tag .   Highlight and select any branches for this label.   When finished, navigate back to  Tag  to select the next label of interest, and select branches accordingly. Proceed until all selections are complete.     Export your labeled phylogeny by clicking the  Newick  dropdown menu and then  Export . A text box with your labeled newick tree will appear. Copy and paste this newick tree as needed.", 
            "title": "Labeling branches with phylotree"
        }, 
        {
            "location": "/methods/general/", 
            "text": "Overview\n#\n\n\nHyPhy provides a suite of tools for analyzing phylogenetic sequence data, in particular for inferring the strength of selection from sequence data. In addition, HyPhy features a flexible batch language for implementing and customizing discrete state Markov models in a phylogenetic framework.\n\n\n\n\n\nMG94xREV Framework\n#\n\n\nAll methods used to infer selection from coding-sequence data rely, to some extent, on the MG94xREV codon model, a generalized extension of the \nMG94 model\n that allows for a full GTR mutation rate matrix. The MG94xREV \ntransition matrix\n \nQ\n (also known as the \ninstantaneous rate matrix\n), for the substitution from codon \ni\n to codon \nj\n is given by: \n\n\n\n\n\\begin{equation}\nq_{ij} = \\left\\{ \n\\begin{array}{rl}\n\\alpha\\theta_{ij}\\pi_{j},         &\\delta(i,j)=1, AA(i)=AA(j)     \\\\\n\\beta\\theta_{ij}\\pi_{j},          &\\delta(i,j)=1, AA(i)\\neq AA(j) \\\\\n0,                                 &\\delta(i,j)>1                  \\\\\n-\\sum_{k \\neq i}q_{ik},            & i=j\n\\end{array} \\right.\n\\end{equation}\n\n\n\n\nParameters in this matrix include the following:\n\n\n\n\n\n\nThe function \n\\boldsymbol{\\delta(i,j)}\n is an indicator function that equals the number of nucleotide differences between codons \ni\n and \nj\n; for example, \n\\delta(AAA,AAT) = 1\n and \n\\delta(AAA,CCG) = 3\n. Like most other codon models, the MG94xREV model considers only single-nucleotide codon substitutions to be instantaneous. \n\n\n\n\n\n\n\n\n\\boldsymbol{AA(i)}\n refers to the amino-acid encoded by codon \ni\n.\n\n\n\n\n\n\n\n\n\\boldsymbol{\\alpha}\n represents the \nsynonymous substitution rate\n dS, and \n\\boldsymbol{\\beta}\n represents the \nnonsynonymous substitution rate\n dN. Hence, \ndN/dS = \\beta/\\alpha\n. We refer to the \ndN/dS\n ratio as simply \n\\omega\n.\n\n\n\n\n\n\nTogether, the mutation model (\"REV\" component of MG94xREV model) is described by two parameter sets: \n\\boldsymbol{\\Theta}\n, comprised of values \n\\theta_{ij}\n, and \n\\boldsymbol{\\Pi}\n, comprised of values \n\\pi_{j}\n. \n\\Theta\n values are the \nnucleotide mutational biases\n, and \n\\Pi\n are the \nequilibrium nucleotide frequencies\n.\n\n\n\n\n\n\nNot explicitly seen in this model are the \nequilibrium codon frequencies\n, denoted \n\\boldsymbol{\\hat{\\Pi}}\n. These frequencies are estimated using nine positional nucleotide frequencies for the target nucleotides in each codon substitution. Specifically, HyPhy employs the \nCF3x4\n frequency estimator, a corrected version of the common F3x4 estimator (introduced in \nGoldman and Yang 1994\n) which accounts for biases in nucleotide composition induced by stop codons. \n\n\n\n\n\n\nMost methods \n will perform a global MG94xREV fit to optimize branch length and nucleotide substitution parameters before proceeding to hypothesis testing. Several methods (\nFEL\n, \nFUBAR\n, and \nMEME\n) additionally pre-fit a GTR nucleotide model to the data, using the estimated parameters as starting values for the global MG94xREV fit, as a computational speed-up. Resulting branch length and nucleotide substitution parameters are subsequently used as initial parameter values during model fitting for hypothesis testing.\n\n\n\n\n\nSynonymous Rate Variation\n#\n\n\nA key component of HyPhy methods is the inclusion of \nsynonymous rate variation\n. In other words, dS is allowed to vary across sites and/or branches, depending on the specific method. \nThis paper\n provides a detailed analysis demonstrating why incorporating synonymous rate variation into positive selection inference is likely beneficial. Importantly, this consideration of synonymous rate variation stands in contrast to methods implemented in, for example, \nPAML\n where dS is constrained to equal 1.", 
            "title": "General Information"
        }, 
        {
            "location": "/methods/general/#overview", 
            "text": "HyPhy provides a suite of tools for analyzing phylogenetic sequence data, in particular for inferring the strength of selection from sequence data. In addition, HyPhy features a flexible batch language for implementing and customizing discrete state Markov models in a phylogenetic framework.", 
            "title": "Overview"
        }, 
        {
            "location": "/methods/general/#mg94xrev-framework", 
            "text": "All methods used to infer selection from coding-sequence data rely, to some extent, on the MG94xREV codon model, a generalized extension of the  MG94 model  that allows for a full GTR mutation rate matrix. The MG94xREV  transition matrix   Q  (also known as the  instantaneous rate matrix ), for the substitution from codon  i  to codon  j  is given by:    \\begin{equation}\nq_{ij} = \\left\\{ \n\\begin{array}{rl}\n\\alpha\\theta_{ij}\\pi_{j},         &\\delta(i,j)=1, AA(i)=AA(j)     \\\\\n\\beta\\theta_{ij}\\pi_{j},          &\\delta(i,j)=1, AA(i)\\neq AA(j) \\\\\n0,                                 &\\delta(i,j)>1                  \\\\\n-\\sum_{k \\neq i}q_{ik},            & i=j\n\\end{array} \\right.\n\\end{equation}   Parameters in this matrix include the following:    The function  \\boldsymbol{\\delta(i,j)}  is an indicator function that equals the number of nucleotide differences between codons  i  and  j ; for example,  \\delta(AAA,AAT) = 1  and  \\delta(AAA,CCG) = 3 . Like most other codon models, the MG94xREV model considers only single-nucleotide codon substitutions to be instantaneous.      \\boldsymbol{AA(i)}  refers to the amino-acid encoded by codon  i .     \\boldsymbol{\\alpha}  represents the  synonymous substitution rate  dS, and  \\boldsymbol{\\beta}  represents the  nonsynonymous substitution rate  dN. Hence,  dN/dS = \\beta/\\alpha . We refer to the  dN/dS  ratio as simply  \\omega .    Together, the mutation model (\"REV\" component of MG94xREV model) is described by two parameter sets:  \\boldsymbol{\\Theta} , comprised of values  \\theta_{ij} , and  \\boldsymbol{\\Pi} , comprised of values  \\pi_{j} .  \\Theta  values are the  nucleotide mutational biases , and  \\Pi  are the  equilibrium nucleotide frequencies .    Not explicitly seen in this model are the  equilibrium codon frequencies , denoted  \\boldsymbol{\\hat{\\Pi}} . These frequencies are estimated using nine positional nucleotide frequencies for the target nucleotides in each codon substitution. Specifically, HyPhy employs the  CF3x4  frequency estimator, a corrected version of the common F3x4 estimator (introduced in  Goldman and Yang 1994 ) which accounts for biases in nucleotide composition induced by stop codons.     Most methods   will perform a global MG94xREV fit to optimize branch length and nucleotide substitution parameters before proceeding to hypothesis testing. Several methods ( FEL ,  FUBAR , and  MEME ) additionally pre-fit a GTR nucleotide model to the data, using the estimated parameters as starting values for the global MG94xREV fit, as a computational speed-up. Resulting branch length and nucleotide substitution parameters are subsequently used as initial parameter values during model fitting for hypothesis testing.", 
            "title": "MG94xREV Framework"
        }, 
        {
            "location": "/methods/general/#synonymous-rate-variation", 
            "text": "A key component of HyPhy methods is the inclusion of  synonymous rate variation . In other words, dS is allowed to vary across sites and/or branches, depending on the specific method.  This paper  provides a detailed analysis demonstrating why incorporating synonymous rate variation into positive selection inference is likely beneficial. Importantly, this consideration of synonymous rate variation stands in contrast to methods implemented in, for example,  PAML  where dS is constrained to equal 1.", 
            "title": "Synonymous Rate Variation"
        }, 
        {
            "location": "/methods/selection-methods/", 
            "text": "Methods for Inferring Selection Pressure\n#\n\n\nHyPhy distributes a variety of methods for inferring the strength of natural selection in your data using the \ndN/dS\n metric. Here, we provide an overview of each method. For help determining which method best suits your specific needs, follow \nthese guidelines\n.\n\n\naBSREL\n#\n\n\naBSREL (\na\ndaptive \nB\nranch-\nS\nite \nR\nandom \nE\nffects \nL\nikelihood) is an improved version of the commonly-used \"branch-site\" models, which are used to test if positive selection has occurred on a proportion of branches. As such, aBSREL models both site-level and branch-level \n\\omega\n  heterogeneity. aBSREL, however, does not test for selection at specific sites. Instead, aBSREL will test, for each branch (or branch of interest) in the phylogeny, whether a proportion of sites have evolved under positive selection. \n\n\naBSREL differs from other branch-site model implementations by inferring the optimal number of \n\\omega\n  classes for each branch. For example, the earlier HyPhy branch-site approach (BS-REL) assumed three \n\\omega\n  rate classes for each branch and assigned each site, with some probability, to one of these classes. aBSREL, by contrast, acknowledges that different branches may feature more or less complex evolutionary patterns and hence may be better modeled by more or fewer \n\\omega\n classes. Specifically, aBSREL uses AIC\nc\n (small sample AIC) to infer the optimal number of \n\\omega\n rate classes for each branch. \n\n\nAfter aBSREL fits the full adaptive model, the Likelihood Ratio Test is performed at each branch and compares the full model to a null model where branches are not allowed to have rate classes of \n\\omega>1\n. \n\n\naBSREL can be run in two modes:\n\n\n\n\nTest a specific hypothesis by \na priori\n selecting a set of \"foreground\" branches to test for positive selection. \n\n\nPerform an exploratory analysis where all branches are tested for positive selection. In this scenario, p-values at each branch must be corrected for multiple testing (using the Holm-Bonferroni correction). Due to multiple testing, the exploratory approach \nhas much lower power\n compared to the other approach. \n\n\n\n\nIf you use aBSREL in your analysis, please cite the following:\n \nSmith, MD et al. \"Less is more: an adaptive branch-site random effects model for efficient detection of episodic diversifying selection.\" Mol. Biol. Evol. 32, 1342\u20131353 (2015).\n\n\n\n\n\nBUSTED\n#\n\n\nBUSTED (\nB\nranch-\nS\nite \nU\nnrestricted \nS\ntatistical \nT\nest for \nE\npisodic \nD\niversification) provides a gene-wide (\nnot site-specific\n) test for positive selection by asking whether a gene has experienced positive selection at at least one site on at least one branch. When running BUSTED, users can either specify a set of foreground branches on which to test for positive selection (remaining branches are designated \"background\"), or users can test the entire phylogeny for positive selection. In the latter case, the entire tree is effectively treated as foreground, and the test for positive selection considers the entire phylogeny.\n\n\nFor each phylogenetic partition (foreground and background branch sites), BUSTED fits a codon model with three rate classes, constrained as \n\\omega_1 \\leq \\omega_2 \\leq 1 \\leq \\omega_3\n. As in other methods, BUSTED simultaneously estimates the proportion of sites per partition belonging to each \n\\omega\n  class. This model, used as the alternative model in selection testing, is referred to as the \nUnconstrained\n model. BUSTED then tests for positive selection by comparing this model fit to a null model where \n\\omega_3 = 1\n (i.e. disallowing positive selection) on the foreground branches. This null model is also referred to as the \nConstrained\n model. If the null hypothesis is rejected, then there is evidence that at least one site has, at least some of the time, experienced positive selection on the foreground branches. Importantly, a significant result \ndoes not\n mean that the gene evolved under positive selection along the entire foreground.\n\n\nBUSTED additionally calculates \"Evidence Ratios\" (ERs) for each site. The ER gives the likelihood ratio (reported on a log-scale) that the alternative model was a better fit to the data compared to the null model. The ER for each site thus provides \ndescriptive information\n about whether a given site could have evolved under positive selection. The ERs \nshould not\n be interpreted as statistical evidence for positive selection at individual sites (instead, methods like \nMEME\n, \nFEL\n, or \nFUBAR\n should be used for detecting selection at individual sites). \n\n\nFor each site, two ERs are reported: the \nConstrained Model\n ER and the \nOptimized Null\n Model ER. The Constrained Model ER calculates the evidence ratio using model parameters inferred from the Constrained model. By contrast, the Optimized Null model ER re-optimizes parameters inferred using the Constrained model for the given site of interest. These optimized parameter values are then used to calculate the site's ER. Again, while these ERs may be helpful descriptors of selection in the data set, they do not provide statistically valid evidence for positive selection at a siten\n\nIf you use BUSTED in your analysis, please cite the following:\n \nMurrell, B et al. \"Gene-wide identification of episodic selection.\" Mol. Biol. Evol. 32, 1365\u20131371 (2015).\n\n\n\n\n\n\n\n\n\n\n\nFEL\n#\n\n\nFEL (\nF\nixed \nE\nfects \nL\nikelihood) uses a maximum-likelihood (ML) approach to infer nonsynoymous (dN) and synonymous (dS) substitution rates on a per-site basis for a given coding alignment and corresponding phylogeny. This method assumes that the selection pressure for each site is constant along the entire phylogeny. \n\n\nAfter optimizing branch lengths and nucleotide substitution parameters, FEL fits a MG94xREV model to each codon site to infer site-specific nonsynonymous and synonymous (dN and dS, respectively) substitution rates. Hypothesis testing is then conducted on a site-specific basis, using the Likelihood Ratio Test, to ascertain if dN is significantly greater than dS.\n\n\nIf you use FEL in your analysis, please cite the following:\n \nKosakovsky Pond, SL and Frost, SDW. \"Not So Different After All: A Comparison of Methods for Detecting Amino Acid Sites Under Selection.\" Mol. Biol. Evol. 22, 1208--1222 (2005).\n\n\n\n\n\nFUBAR\n#\n\n\nFUBAR (\nF\nast, \nU\nnconstrained \nB\nayesian \nA\npp\nR\noximation) uses a Bayesian approach to infer nonsynoymous (dN) and synonymous (dS) substitution rates on a per-site basis for a given coding alignment and corresponding phylogeny. This method assumes that the selection pressure for each site is constant along the entire phylogeny.\n\n\nAlthough FUBAR produces similar information to FEL, it has several key differences:\n\n\n\n\nFUBAR employs a Bayesian algorithm to infer rates, and therefore it reports evidence for positive selection using \nposterior probabilities\n (which range from 0-1), not p-values. Generally, posterior probabilities \n 0.9 are strongly suggestive of positive selection. \n\n\nFUBAR runs extremely quickly and is well-suited for analyzing large alignments, with hundreds or thousands of sequences. This speed-up results from the novel strategy of employing a pre-specified discrete grid of dN and dS values to be applied across sites. This approach contrasts with the time-consuming FEL strategy of fitting a new MG94xREV model at each site.\n\n\nFUBAR may have more power than FEL, in particular when positive selection is present but relatively weak (i.e. low values of \n\\omega>1\n).\n\n\n\n\nIf you use FUBAR in your analysis, please cite the following:\n \nMurrell, B et al. \"FUBAR: A Fast, Unconstrained Bayesian AppRoximation for inferring selection.\" Mol. Biol. Evol. 30, 1196\u20131205 (2013).\n\n\n\n\n\nGARD\n#\n\n\nGARD (\nG\nenetic \nA\nlgorithm for \nR\necombination \nD\netection) is a method to screen a multiple sequence analysis for the presence of recombination and is extremely useful as a \npre-processing step for selection inference\n. Because recombinant sequences cannot be adequately described with a single phylogenetic history, selection inference on recombinant data often leads to a significant increase in false positives. GARD alleviates this concern by comprehensively screening an alignment for recombination breakpoints and inferring a unique phylogenetic history for each detected recombination block.\n\n\nIf GARD detects recombination in your dataset, it will provide you with an updated \npartitioned\n dataset, where each partition corresponds to a recombination block with its own corresponding phylogeny. This partitioned dataset can then be used as input (instead of your original data) for the selection inference method of interest.\n\n\n\n\n\nIf you use GARD in your analysis, please cite the following:\n \nKosakovsky Pond, SL et al. \"Automated Phylogenetic Detection of Recombination Using a Genetic Algorithm.\" Mol. Biol. Evol. 23, 1891\u20131901 (2006).\n\n\n\n\n\nMEME\n#\n\n\nMEME (\nM\nixed \nE\nffects \nM\nodel of \nE\nvolution) employs a mixed-effects maximum likelihood approach to test the hypothesis that individual sites have been subject to episodic positive or diversifying selection. \nIn other words, MEME aims to detect sites evolving under positive selection under a \nproportion\n of branches.\n\n\nFor each site, MEME infers two \n\\omega\n rate classes and corresponding weights representing the probability that the site evolves under \n\\omega\n rate class, at a given branch. Importantly, to infer \n\\omega\n rates, MEME infers a single \n\\alpha\n (dS) value and two separate \n\\beta\n (dN) values, \n\\beta^-\n and \n\\beta^+\n, which share the same \n\\alpha\n, per site. For both the null and alternative model, MEME enforces the constraint \n\\beta^- \\leq \\alpha\n. The \n\\beta^+\n parameter is therefore the key difference between null and alternative models: In the null model, \n\\beta^+\n is constrained as in the null model: \n\\beta^+ \\leq \\alpha\n, but \n\\beta^+\n is not constrained in the alternative model. Ultimately, positive selection for each site is inferred when \n\\beta^+ > \\alpha\n and shown to be significant using the likelihood ratio test. \n\n\nIf you use MEME in your analysis, please cite the following:\n \nMurrell, B et al. \"Detecting individual sites subject to episodic diversifying selection.\" PLoS Genetics 8, e1002764 (2012).\n\n\n\n\n\nRELAX\n#\n\n\nRELAX is a hypothesis testing framework that asks whether the strength of natural selection has been relaxed or intensified along a specified set of test branches. RELAX is therefore \nnot\n a suitable method for explicitly testing for positive selection. Instead, RELAX is most useful for identifying trends and/or shifts in the stringency of natural selection on a given gene.\n\n\nRELAX requires a specified set of \"test\" branches to compare with a second set of \"reference\" branches (note that all branches do not have to be assigned, but one branch is required the test and reference set each). RELAX begins by fitting a codon model with three \n\\omega\n  classes to the entire phylogeny (null model). RELAX then tests for relaxed/intensified selection by introducing the parameter \nk\n (where \nk \\geq 0\n), serving as the \nselection intensity parameter\n, as an exponent for the inferred \n\\omega\n  values: \n\\omega^k\n. Specifically, RELAX fixes the inferred \n\\omega\n values (all \n\\omega_{<1,2,3>}\n) and infers, for the test branches, a value for \nk\n which modifies the rates to \n\\omega_{<1,2,3>}^k\n (alternative model). RELAX then conducts a Likelihood Ratio Test to compare the alternative and null models. \n\n\nA significant result of \nk\n1 indicates that selection strength has been intensified\n along the test branches, and a significant result of \nk\n1 indicates that selection strength has been relaxed\n along the test branches.\n\n\nIn addition to this pair of null/alternative models, RELAX fits three other models meant as complementary descriptors for the data, but are not suitable for hypothesis testing. These additional models include the following:\n\n\n\n\nPartitioned MG94xREV\n - This model fits a single \n\\omega\n value, i.e. shared for all sites, to each branch partition (reference and test). Here, a total of two \n\\omega\n rates are inferred.\n\n\nPartitioned Descriptive\n - This model, like a more standard branch-site model, fits three \n\\omega\n  classes separately to each branch partition (reference and test, producing a total of six estimated \n\\omega\n rates estimated). The selection intensity parameter \nk\n is not included.\n\n\nGeneral Descriptive\n - This model fits three \n\\omega\n  classes to the full data set, ignoring the specified test and reference partition division (three total \n\\omega\n rates estimated). It subsequently fits a \nk\n parameter at each branch, ultimately tailoring the three \n\\omega\n  class values to this branch. This model may serve as a useful description of how selection intensity fluctuates over the whole tree.\n\n\n\n\nIf you use RELAX in your analysis, please cite the following:\n \nWertheim, JO et al. \"RELAX: detecting relaxed selection in a phylogenetic framework.\" Mol. Biol. Evol. 32, 820\u2013832 (2015).\n\n\n\n\n\nSLAC\n#\n\n\nSLAC (\nS\ningle-\nL\nikelihood \nA\nncestor \nC\nounting) uses a combination of maximum-likelihood (ML) and counting approaches to infer nonsynonymous (dN) and synonymous (dS) substitution rates on a per-site basis for a given coding alignment and corresponding phylogeny. Like FEL, this method assumes that the selection pressure for each site is constant along the entire phylogeny. \n\n\nSLAC begins by optimizing branch lengths and nucleotide substitution parameters under the MG94xREV model. However, rather than using ML to fit site-specific dN and dS parameters, SLAC instead uses ML to infer the most likely ancestral sequence at each node of the phylogeny. SLAC then employs a modified version of the \nSuzuki-Gojobori counting method\n to directly count the total number of nonsynonymous and synonymous changes which have occurred at each site. Significance is ascertained at each site using an extended binomial distribution. Importantly, due to its counting-based approach, SLAC may not be accurate for data sets with high divergence levels.\n\n\nIf you use SLAC in your analysis, please cite the following:\n \nKosakovsky Pond, SL and Frost, SDW. \"Not So Different After All: A Comparison of Methods for Detecting Amino Acid Sites Under Selection.\" Mol. Biol. Evol. 22, 1208--1222 (2005).", 
            "title": "Selection"
        }, 
        {
            "location": "/methods/selection-methods/#methods-for-inferring-selection-pressure", 
            "text": "HyPhy distributes a variety of methods for inferring the strength of natural selection in your data using the  dN/dS  metric. Here, we provide an overview of each method. For help determining which method best suits your specific needs, follow  these guidelines .", 
            "title": "Methods for Inferring Selection Pressure"
        }, 
        {
            "location": "/methods/selection-methods/#absrel", 
            "text": "aBSREL ( a daptive  B ranch- S ite  R andom  E ffects  L ikelihood) is an improved version of the commonly-used \"branch-site\" models, which are used to test if positive selection has occurred on a proportion of branches. As such, aBSREL models both site-level and branch-level  \\omega   heterogeneity. aBSREL, however, does not test for selection at specific sites. Instead, aBSREL will test, for each branch (or branch of interest) in the phylogeny, whether a proportion of sites have evolved under positive selection.   aBSREL differs from other branch-site model implementations by inferring the optimal number of  \\omega   classes for each branch. For example, the earlier HyPhy branch-site approach (BS-REL) assumed three  \\omega   rate classes for each branch and assigned each site, with some probability, to one of these classes. aBSREL, by contrast, acknowledges that different branches may feature more or less complex evolutionary patterns and hence may be better modeled by more or fewer  \\omega  classes. Specifically, aBSREL uses AIC c  (small sample AIC) to infer the optimal number of  \\omega  rate classes for each branch.   After aBSREL fits the full adaptive model, the Likelihood Ratio Test is performed at each branch and compares the full model to a null model where branches are not allowed to have rate classes of  \\omega>1 .   aBSREL can be run in two modes:   Test a specific hypothesis by  a priori  selecting a set of \"foreground\" branches to test for positive selection.   Perform an exploratory analysis where all branches are tested for positive selection. In this scenario, p-values at each branch must be corrected for multiple testing (using the Holm-Bonferroni correction). Due to multiple testing, the exploratory approach  has much lower power  compared to the other approach.    If you use aBSREL in your analysis, please cite the following:   Smith, MD et al. \"Less is more: an adaptive branch-site random effects model for efficient detection of episodic diversifying selection.\" Mol. Biol. Evol. 32, 1342\u20131353 (2015).", 
            "title": "aBSREL"
        }, 
        {
            "location": "/methods/selection-methods/#busted", 
            "text": "BUSTED ( B ranch- S ite  U nrestricted  S tatistical  T est for  E pisodic  D iversification) provides a gene-wide ( not site-specific ) test for positive selection by asking whether a gene has experienced positive selection at at least one site on at least one branch. When running BUSTED, users can either specify a set of foreground branches on which to test for positive selection (remaining branches are designated \"background\"), or users can test the entire phylogeny for positive selection. In the latter case, the entire tree is effectively treated as foreground, and the test for positive selection considers the entire phylogeny.  For each phylogenetic partition (foreground and background branch sites), BUSTED fits a codon model with three rate classes, constrained as  \\omega_1 \\leq \\omega_2 \\leq 1 \\leq \\omega_3 . As in other methods, BUSTED simultaneously estimates the proportion of sites per partition belonging to each  \\omega   class. This model, used as the alternative model in selection testing, is referred to as the  Unconstrained  model. BUSTED then tests for positive selection by comparing this model fit to a null model where  \\omega_3 = 1  (i.e. disallowing positive selection) on the foreground branches. This null model is also referred to as the  Constrained  model. If the null hypothesis is rejected, then there is evidence that at least one site has, at least some of the time, experienced positive selection on the foreground branches. Importantly, a significant result  does not  mean that the gene evolved under positive selection along the entire foreground.  BUSTED additionally calculates \"Evidence Ratios\" (ERs) for each site. The ER gives the likelihood ratio (reported on a log-scale) that the alternative model was a better fit to the data compared to the null model. The ER for each site thus provides  descriptive information  about whether a given site could have evolved under positive selection. The ERs  should not  be interpreted as statistical evidence for positive selection at individual sites (instead, methods like  MEME ,  FEL , or  FUBAR  should be used for detecting selection at individual sites).   For each site, two ERs are reported: the  Constrained Model  ER and the  Optimized Null  Model ER. The Constrained Model ER calculates the evidence ratio using model parameters inferred from the Constrained model. By contrast, the Optimized Null model ER re-optimizes parameters inferred using the Constrained model for the given site of interest. These optimized parameter values are then used to calculate the site's ER. Again, while these ERs may be helpful descriptors of selection in the data set, they do not provide statistically valid evidence for positive selection at a sitef you use BUSTED in your analysis, please cite the following:   Murrell, B et al. \"Gene-wide identification of episodic selection.\" Mol. Biol. Evol. 32, 1365\u20131371 (2015).", 
            "title": "BUSTED"
        }, 
        {
            "location": "/methods/selection-methods/#fel", 
            "text": "FEL ( F ixed  E fects  L ikelihood) uses a maximum-likelihood (ML) approach to infer nonsynoymous (dN) and synonymous (dS) substitution rates on a per-site basis for a given coding alignment and corresponding phylogeny. This method assumes that the selection pressure for each site is constant along the entire phylogeny.   After optimizing branch lengths and nucleotide substitution parameters, FEL fits a MG94xREV model to each codon site to infer site-specific nonsynonymous and synonymous (dN and dS, respectively) substitution rates. Hypothesis testing is then conducted on a site-specific basis, using the Likelihood Ratio Test, to ascertain if dN is significantly greater than dS.  If you use FEL in your analysis, please cite the following:   Kosakovsky Pond, SL and Frost, SDW. \"Not So Different After All: A Comparison of Methods for Detecting Amino Acid Sites Under Selection.\" Mol. Biol. Evol. 22, 1208--1222 (2005).", 
            "title": "FEL"
        }, 
        {
            "location": "/methods/selection-methods/#fubar", 
            "text": "FUBAR ( F ast,  U nconstrained  B ayesian  A pp R oximation) uses a Bayesian approach to infer nonsynoymous (dN) and synonymous (dS) substitution rates on a per-site basis for a given coding alignment and corresponding phylogeny. This method assumes that the selection pressure for each site is constant along the entire phylogeny.  Although FUBAR produces similar information to FEL, it has several key differences:   FUBAR employs a Bayesian algorithm to infer rates, and therefore it reports evidence for positive selection using  posterior probabilities  (which range from 0-1), not p-values. Generally, posterior probabilities   0.9 are strongly suggestive of positive selection.   FUBAR runs extremely quickly and is well-suited for analyzing large alignments, with hundreds or thousands of sequences. This speed-up results from the novel strategy of employing a pre-specified discrete grid of dN and dS values to be applied across sites. This approach contrasts with the time-consuming FEL strategy of fitting a new MG94xREV model at each site.  FUBAR may have more power than FEL, in particular when positive selection is present but relatively weak (i.e. low values of  \\omega>1 ).   If you use FUBAR in your analysis, please cite the following:   Murrell, B et al. \"FUBAR: A Fast, Unconstrained Bayesian AppRoximation for inferring selection.\" Mol. Biol. Evol. 30, 1196\u20131205 (2013).", 
            "title": "FUBAR"
        }, 
        {
            "location": "/methods/selection-methods/#gard", 
            "text": "GARD ( G enetic  A lgorithm for  R ecombination  D etection) is a method to screen a multiple sequence analysis for the presence of recombination and is extremely useful as a  pre-processing step for selection inference . Because recombinant sequences cannot be adequately described with a single phylogenetic history, selection inference on recombinant data often leads to a significant increase in false positives. GARD alleviates this concern by comprehensively screening an alignment for recombination breakpoints and inferring a unique phylogenetic history for each detected recombination block.  If GARD detects recombination in your dataset, it will provide you with an updated  partitioned  dataset, where each partition corresponds to a recombination block with its own corresponding phylogeny. This partitioned dataset can then be used as input (instead of your original data) for the selection inference method of interest.   If you use GARD in your analysis, please cite the following:   Kosakovsky Pond, SL et al. \"Automated Phylogenetic Detection of Recombination Using a Genetic Algorithm.\" Mol. Biol. Evol. 23, 1891\u20131901 (2006).", 
            "title": "GARD"
        }, 
        {
            "location": "/methods/selection-methods/#meme", 
            "text": "MEME ( M ixed  E ffects  M odel of  E volution) employs a mixed-effects maximum likelihood approach to test the hypothesis that individual sites have been subject to episodic positive or diversifying selection. \nIn other words, MEME aims to detect sites evolving under positive selection under a  proportion  of branches.  For each site, MEME infers two  \\omega  rate classes and corresponding weights representing the probability that the site evolves under  \\omega  rate class, at a given branch. Importantly, to infer  \\omega  rates, MEME infers a single  \\alpha  (dS) value and two separate  \\beta  (dN) values,  \\beta^-  and  \\beta^+ , which share the same  \\alpha , per site. For both the null and alternative model, MEME enforces the constraint  \\beta^- \\leq \\alpha . The  \\beta^+  parameter is therefore the key difference between null and alternative models: In the null model,  \\beta^+  is constrained as in the null model:  \\beta^+ \\leq \\alpha , but  \\beta^+  is not constrained in the alternative model. Ultimately, positive selection for each site is inferred when  \\beta^+ > \\alpha  and shown to be significant using the likelihood ratio test.   If you use MEME in your analysis, please cite the following:   Murrell, B et al. \"Detecting individual sites subject to episodic diversifying selection.\" PLoS Genetics 8, e1002764 (2012).", 
            "title": "MEME"
        }, 
        {
            "location": "/methods/selection-methods/#relax", 
            "text": "RELAX is a hypothesis testing framework that asks whether the strength of natural selection has been relaxed or intensified along a specified set of test branches. RELAX is therefore  not  a suitable method for explicitly testing for positive selection. Instead, RELAX is most useful for identifying trends and/or shifts in the stringency of natural selection on a given gene.  RELAX requires a specified set of \"test\" branches to compare with a second set of \"reference\" branches (note that all branches do not have to be assigned, but one branch is required the test and reference set each). RELAX begins by fitting a codon model with three  \\omega   classes to the entire phylogeny (null model). RELAX then tests for relaxed/intensified selection by introducing the parameter  k  (where  k \\geq 0 ), serving as the  selection intensity parameter , as an exponent for the inferred  \\omega   values:  \\omega^k . Specifically, RELAX fixes the inferred  \\omega  values (all  \\omega_{<1,2,3>} ) and infers, for the test branches, a value for  k  which modifies the rates to  \\omega_{<1,2,3>}^k  (alternative model). RELAX then conducts a Likelihood Ratio Test to compare the alternative and null models.   A significant result of  k 1 indicates that selection strength has been intensified  along the test branches, and a significant result of  k 1 indicates that selection strength has been relaxed  along the test branches.  In addition to this pair of null/alternative models, RELAX fits three other models meant as complementary descriptors for the data, but are not suitable for hypothesis testing. These additional models include the following:   Partitioned MG94xREV  - This model fits a single  \\omega  value, i.e. shared for all sites, to each branch partition (reference and test). Here, a total of two  \\omega  rates are inferred.  Partitioned Descriptive  - This model, like a more standard branch-site model, fits three  \\omega   classes separately to each branch partition (reference and test, producing a total of six estimated  \\omega  rates estimated). The selection intensity parameter  k  is not included.  General Descriptive  - This model fits three  \\omega   classes to the full data set, ignoring the specified test and reference partition division (three total  \\omega  rates estimated). It subsequently fits a  k  parameter at each branch, ultimately tailoring the three  \\omega   class values to this branch. This model may serve as a useful description of how selection intensity fluctuates over the whole tree.   If you use RELAX in your analysis, please cite the following:   Wertheim, JO et al. \"RELAX: detecting relaxed selection in a phylogenetic framework.\" Mol. Biol. Evol. 32, 820\u2013832 (2015).", 
            "title": "RELAX"
        }, 
        {
            "location": "/methods/selection-methods/#slac", 
            "text": "SLAC ( S ingle- L ikelihood  A ncestor  C ounting) uses a combination of maximum-likelihood (ML) and counting approaches to infer nonsynonymous (dN) and synonymous (dS) substitution rates on a per-site basis for a given coding alignment and corresponding phylogeny. Like FEL, this method assumes that the selection pressure for each site is constant along the entire phylogeny.   SLAC begins by optimizing branch lengths and nucleotide substitution parameters under the MG94xREV model. However, rather than using ML to fit site-specific dN and dS parameters, SLAC instead uses ML to infer the most likely ancestral sequence at each node of the phylogeny. SLAC then employs a modified version of the  Suzuki-Gojobori counting method  to directly count the total number of nonsynonymous and synonymous changes which have occurred at each site. Significance is ascertained at each site using an extended binomial distribution. Importantly, due to its counting-based approach, SLAC may not be accurate for data sets with high divergence levels.  If you use SLAC in your analysis, please cite the following:   Kosakovsky Pond, SL and Frost, SDW. \"Not So Different After All: A Comparison of Methods for Detecting Amino Acid Sites Under Selection.\" Mol. Biol. Evol. 22, 1208--1222 (2005).", 
            "title": "SLAC"
        }, 
        {
            "location": "/tutorials/current-release-tutorial/", 
            "text": "Using HyPhy to detect selection.\n#\n\n\nThese tutorials outline how to prepare data and execute analyses in HyPhy's suite of methods for detecting natural selection in protein-coding alignments. Specifically, this tutorial explains how to use the \ncurrent release\n of HyPhy from the \ncommand line\n.\n\n\nBefore you begin\n\n\n\n\nInstall the current release of HyPhy on your computer, as needed, using \nthese instructions\n.\n\n\nThis tutorial employs example datasets, available for download as a  \nzip file\n. Unpack this zip file on your machine for use and \nremember the absolute path to this directory\n.\n\n\nThis tutorial assumes you are specifically using the HyPhy executable \nHYPHYMP\n. If you have installed a different executable (e.g. \nHYPHYMPI\n), you may need to alter some commands.\n\n\nThis tutorial uses the interactive HyPhy menu prompt to perform analyses. If you wish to automate many analyses instead of using HyPhy interactively, see the section \nAutomating Analyses\n for modified instructions.\n\n\n\n\n\n\n\n\n\n\nEstimate a single alignment-wide \n.\n#\n\n\nFor this example, we will use HyPhy to estimate a single alignment-wide \n\\omega\n for the example dataset \nWestNileVirus_NS3.fas\n. You can examine the contents of this file in a text editor. It contains a FASTA-formatted multiple sequence alignment followed by a corresponding newick-formatted tree.\n\n\n\n\n\n\nLaunch HyPhy from the command line by entering \nHYPHYMP\n. Provide the following options to the menu prompts:\n\n\n\n\nEnter \n1\n to select \nBasic Analyses\n.\n\n\nEnter \n1\n to select \nAnalyze codon data with a variety of standard models using a given tree.\n\n\nEnter \n1\n to select the Universal genetic code.\n\n\nEnter the \nabsolute path\n to your alignment file: \n/path/to/downloaded/example/files/WestNileVirus_NS3.fas\n.      \n\n\nThis screen shows a variety of model options to fit to this dataset. We will use HyPhy's preferred model \nMG94xREV\n. Select this option by entering \nMG94CUSTOMCF3X4\n.\n\n\nEnter \n2\n, which tells HyPhy that the estimated \n\\omega\n should be shared across the entire alignment tree.\n\n\nEnter the string \n012345\n, which tells HyPhy to use the GTR mutation model in the MG94 model.\n\n\nEnter \nY\n to confirm that HyPhy should use the tree provided in the alignment file.\n\n\nEnter \nEstimate\n to tell HyPhy to use maximum likelihood to estimate and optimize branch lengths on the provided tree.\n\n\n\n\n\n\n\n\nHyPhy will now perform your analysis, which should take several minutes (depending on your computer). \n\n\n\n\n\n\nOnce the analysis has completed, output that looks like this will appear:\n\n\n\n\n\n\n______________RESULTS______________\n\n\nLog\n \nLikelihood\n \n=\n \n-6413\n.\n50468184347\n;\n\n\nShared\n \nParameters\n:\n\n\nR\n=\n0\n.\n008557848966878849\n\n\nGT\n=\n0\n.\n2303600815210618\n\n\nCT\n=\n1\n.\n979989664067556\n\n\nCG\n=\n0\n.\n02076764883647483\n\n\nAC\n=\n0\n.\n2428440082030551\n\n\nAT\n=\n0\n.\n3056061615274677\n\n\n\nTree\n \ngivenTree\n=((((((\nHNY1999\n:\n0\n.\n001101787189557129\n,\nNY99_EQHS\n:\n0\n.\n00108698796444847\n)\nNode6\n:\n0\n,\nNY99_FLAMINGO\n:\n0\n)\nNode5\n:\n0\n,\nMEX03\n:\n0\n.\n003274397587748566\n)\nNode4\n:\n0\n.\n001043699094072735\n,\nIS_98\n:\n0\n.\n002238969679775947\n)\nNode3\n:\n0\n.\n0108106327401535\n,\nPAH001\n:\n0\n.\n009947231998139823\n)\nNode2\n:\n0\n.\n006480815229843424\n,\nAST99\n:\n0\n.\n01679372620666718\n,((((\nRABENSBURG_ISOLATE\n:\n1\n.\n05102590132809\n,(\nWNFCG\n:\n0\n.\n01053193289945618\n,\nSPU116_89\n:\n0\n.\n00569613982107767\n)\nNode19\n:\n0\n.\n507068944265484\n)\nNode17\n:\n0\n.\n5772661357618611\n,\nKUNCG\n:\n0\n.\n08756311980263866\n)\nNode16\n:\n0\n.\n06947527827356371\n,(\nETHAN4766\n:\n0\n.\n02385184540957046\n,(\nCHIN_01\n:\n0\n.\n01206163326344818\n,\nEG101\n:\n0\n.\n01506055273715259\n)\nNode25\n:\n0\n.\n007681688497219724\n)\nNode23\n:\n0\n.\n003442808476468687\n)\nNode15\n:\n0\n.\n01851421610241251\n,(((\nITALY_1998_EQUINE\n:\n0\n.\n009037431851104481\n,\nPAAN001\n:\n0\n.\n007872553578665653\n)\nNode30\n:\n0\n.\n002694356278175029\n,(\nRO97_50\n:\n0\n.\n001642931262019352\n,\nVLG_4\n:\n0\n.\n00108305411902561\n)\nNode33\n:\n0\n.\n002794580801147744\n)\nNode29\n:\n0\n.\n0007243769694723316\n,\nKN3829\n:\n0\n.\n003058011972423634\n)\nNode28\n:\n0\n.\n01097965849521703\n)\nNode14\n:\n0\n.\n00929314901848397\n);\n\n\n\n\n\n\nThe \nR\n parameter represents your alignment-wide \n\\omega\n. \nYour result for this analysis is \n = 0.00856.\n\n\nAdditional information reported here includes the following:\n\n\n\n\nLog Likelihood\n is the log likelihood of the model fit to your dataset.\n\n\nParameters named \nGT\n, \nCT\n, etc. represent the nucleotide exchangeability rates inferred for the GTR mutation model component of the MG94 codon model.\n\n\nTree givenTree\n is your provided tree with branch lengths have been optimized under the fitted MG94xREV model.\n\n\n\n\n\n\n\n\nUse BUSTED to test for alignment-wide episodic diversification.\n#\n\n\n\n\n\n\nBUSTED\n is a method described in \nMurrell et al\n. It has been extensively tested and shows better power and accuracy than either \n\"branch-site\" models in PAML\n, or the \n\"covarion\" style models\n. \n\n\n\n\nFor this example, we will run BUSTED on the dataset \nHIV.nex\n, which includes partial clonal HIV-1 env sequences from epidemiologically linked partners (source/donor and recipient). We will run BUSTED in two ways:\n\n\n\n\nRun BUSTED to test for selection across the entire tree.\n\n\nRun BUSTED to test for selection on specific \na priori\n selection of foreground branches.\n\n\n\n\nBUSTED: Full tree analysis\n#\n\n\n\n\n\n\nLaunch HyPhy from the command line by entering \nHYPHYMP\n. Provide the following options to the menu prompts:\n\n\n\n\nEnter \n10\n to select \nPositive Selection\n.\n\n\nEnter \n4\n to select \nRun the Branch-site Unrestricted Statistical Test for Episodic Diversification to test for evidence of episodic alignment-wide selective pressure.\n\n\nEnter \n1\n to select the Universal genetic code.\n\n\nEnter the \nabsolute path\n to your dataset (in this case, a NEXUS file): \n/path/to/downloaded/example/files/HIV.nex\n.      \n\n\nEnter \nY\n to confirm that HyPhy should use the tree provided in the dataset file.\n\n\nEnter \n1\n to select \nAll\n branches to test for selection with BUSTED.\n\n\nEnter \nd\n to indicate that your branch selection is complete. \n\n\n\n\n\n\n\n\nBUSTED will now run for a few minutes, outputting various status indicators as it proceeds. Once BUSTED completes, the total output will look like this:\n\n\n\n\n\n\n[BUSTED] Selected 26 branches as the test (foreground) set: R20_239,R20_245,Node5,R20_240,R20_238,R20_242,Node4,R20_241,Node3,R20_243,Node2,R20_244,Node1,D20_233,D20_235,D20_236,D20_232,Node17,D20_234,D20_237,Node21,Node16,D20_230,D20_231,Node24,Node15 \n[BUSTED] Obtaining initial branch lengths under the GTR model \n[BUSTED] Log(L) = -2114.132335772669 \n[BUSTED] Fitting the unconstrained branch-site model \n[BUSTED] Log(L) = -2039.992959126133. Unrestricted class omega = 104.6591567580357 (weight = 0.02032866068122922) \n[BUSTED] Fitting the branch-site model that disallows omega \n 1 among foreground branches \n[BUSTED] Log(L) = -2076.666683221396 \n[BUSTED] Likelihood ratio test for episodic positive selection, p = 1.110223024625157e-16 \n\n\n\n\n\nThis result tells us a few things:\n\n\n\n\nA proportion of sites (\n\\sim 0.02032\n) is evolving with \n\\omega > 1\n a subset of the branches, although we do not know which branches specifically.\n\n\nThe performed Likelihood ratio test returned a P-value\n=1.11\\times10^{-16}\n. This result means that disallowing positive selection results in a \nsignificantly worse fit\n to the data. \nWe therefore reject the null hypothesis that there is no episodic positive selection the alignment.\n  \n\n\n\n\nIn addition to this output, HyPhy has also generated a \nJSON\n containing a more detailed analysis output. The JSON will be written to same directory as the \ninput alignment file\n, with \nBUSTED.json\n appended to the file name. In this example the JSON file is named \n/path/to/downloaded/example/files/HIV.nex.BUSTED.json\n. You can visualize, explore, and obtain plots from this JSON file using the \nHyPhy Vision web application\n.\n\n\nBUSTED: Test a subset of branches for selection\n#\n\n\nTo test for a specific selection of branches, you can modify step \n1.6\n from the previous BUSTED example to instead select one or more branches of interest to define as the foreground set. \n\n\nAlternatively, you can directly annotate your tree with the flag \n{FG}\n at specific nodes to indicate foreground branches. The most convenient way to annotate your tree is with the web-based \nphylotree widget\n, as demonstrated:\n\n\n.\n\n\nIf you label your tree in this manner, the branch selection prompt (step 1.6 above) will show a new menu where option \n4\n now tests only the foreground branches, rather than the full tree. All other aspects of the analysis will remain the same.\n\n\nExample results for such an \na priori\n analysis might look like the following:\n\n\n\n\n\n[BUSTED] Selected 1 branches as the test (foreground) set: Node1 \n[BUSTED] Obtaining initial branch lengths under the GTR model \n[BUSTED] Log(L) = -2114.13233621422 \n[BUSTED] Fitting the unconstrained branch-site model \n[BUSTED] Log(L) = -2031.302017161514. Unrestricted class omega = 524.9720891747666 (weight = 0.07815647810018292) \n[BUSTED] Fitting the branch-site model that disallows omega \n 1 among foreground branches \n[BUSTED] Log(L) = -2050.101940483789 \n[BUSTED] Likelihood ratio test for episodic positive selection, p = 6.843795752331516e-09 \n\n\n\n\n\nRunning BUSTED to test this specified branch set for selection tells us the following information:\n\n\n\n\nA proportion of sites (\n\\sim 0.078\n) is evolving with \n\\omega > 1\n on the \nspecified\n set of foreground branch(es).\n\n\nThe performed Likelihood ratio test returned a P-value\n=6.84\\times10^{-9}\n. This result means that disallowing positive selection results in a \nsignificantly worse fit\n to the data. \nWe therefore reject the null hypothesis that there is no episodic positive selection on the specified foreground branch(es).\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\nUse aBSREL to find lineages which have experienced episodic diversification.\n#\n\n\n\n\naBSREL\n is a method described in \nSmith et al\n. It is an extension of our popular \nBS-REL model\n, which performs a complexity analysis and model selection prior to doing hypothesis testing. It runs much faster than BS-REL and has better statistical properies.\n\n\n\n\nFor this example, we will run aBSREL on the dataset \nHIV.nex\n, which includes partial clonal HIV-1 env sequences from epidemiologically linked partners (source/donor and recipient). Note that this analysis differs from the BUSTED example described above because aBSREL will scan the phylogeny\nfor all the branches where selection may have operated. As with BUSTED, we will run aBSREL in two ways:\n\n\n\n\nRun aBSREL to test for selection by scanning all branches in the tree.\n\n\nRun BUSTED to test for selection by testing only an \na priori\n selection of branches. This approach of analysis will have increased power to detect lineage-specific selection.\n\n\n\n\naBSREL: Full tree analysis\n#\n\n\n\n\n\n\nLaunch HyPhy from the command line by entering \nHYPHYMP\n. Provide the following options to the menu prompts:\n\n\n\n\nEnter \n10\n to select \nPositive Selection\n.\n\n\nEnter \n1\n to select \nUse the random effects branch-site model (2010) to find lineages subject to episodic selection.\n\n\nEnter \n1\n to select the Universal genetic code.\n\n\nEnter \n1\n to use the aBSREL method (instead of the older BS-REL method) \n\n\nEnter \n2\n to assume that synonymous rates (\ndS\n) do not vary across sites (only \ndN\n will vary). You may select option \n1\n, although aBSREL will run much more slowly without substantial benefit. \n\n\nEnter the \nabsolute path\n to your dataset (in this case, a NEXUS file): \n/path/to/downloaded/example/files/HIV.nex\n.      \n\n\nEnter \nY\n to confirm that HyPhy should use the tree provided in the dataset file. \n\n\nImportantly\n, if you have modified the tree in this NEXUS file for use with BUSTED or RELAX (e.g. branch annotations), \nenter\n \nN\n and instead provide the tree file \n/path/to/downloaded/example/files/HIV.nwk\n (a clean newick tree file) at the next menu prompt. \n\n\n\n\n\n\nEnter \n2\n to select \nAll\n branches to test for selection with aBSREL.\n\n\nEnter \nd\n to indicate that your branch selection is complete. \n\n\nEnter an \nabsolute path\n to a file where aBSREL output should be saved, for example \n/path/to/downloaded/example/files/HIV.nex.aBSREL\n.\n\n\n\n\n\n\n\n\nThe analysis will now run for several (many) minutes and produce a lot of diagnostic output while running, corresponding to aBSREL analysis stages:\n\n\n\n\n[PHASE 0]\n: As the initial phase, aBSREL fits the standard \nMG94xREV\n model to estimate a single \n\\omega\n for each branch and prints out model fit statistics. This is the simplest model that can be selected by aBSREL.\n\n\n[PHASE 1]\n: aBSREL then sorts all the branches by length (longest first), and tries to greedily add \n\\omega\n categories to one branch at a time, until the addition is no longer justified by AIC\nc\n scores.\n\n\n[INFERRED MODEL COMPLEXITY]\n: When aBSREL has determined the optimal number of \n\\omega\n categories at each branch, a summary of inferred model complexity will be printed to the screen.\n\n\n[PHASE 2]\n: Next, aBSREL optimizes all model parameters for the branch models determined in \n[PHASE 1]\n.\n\n\nNext, aBSREL will test all the branches selected in step 1.8 above (in this example, \nAll\n branches) to see if there is a proportion of sites\nwith \n\\omega > 1\n along that branch. aBSREL further assesses, using branch-specific Likelihood ratio tests, whether disallowing any categories of \n\\omega>1\n would result in a significantly worse fit to the data. Note that, as a shortcut, aBSREL will only perform the LRT for a branch if it indeed contained sites with \n\\omega > 1\n. \nThis is the most time consuming phase of the analysis.\n aBSREL prints a running tally to the screen as tests proceed, including the rate distribution inferred for a particular branch under the null model (e.g. \n\\omega \\leq 1\n) the branch's \nuncorrected\n p-value. Branches not tested will show p-value=0.5.\n\n\n\n\n\n\n\n\nOnce the analysis completes, aBSREL will print out the list of all branches with p-values below 0.05 \nafter\n \napplying the \nHolm-Bonferroni multiple testing correction\n, and a CPU time report indicating how long each step of the analysis took:\n\n\n\n\n\n\nSummary of branches under episodic selection (26 were tested, of which 14 required optimizations) :\n    Node1 p = 2.143165644952205e-10\n    Node16 p = 0.0002007962489750659\n    D20_233 p = 0.0006790829268799037\n\n\n === CPU TIME REPORT === \n    MG94 model fit : 00:00:52\n    Rate class complexity analysis : 00:04:58\n    aBSREL model fit : 00:01:46\n    Individual branch selection testing : 00:12:02\n    Total time : 00:28:26\n\n\n\n\n\nOur aBSREL analysis determined that \nthree\n branches with evidence of episodic diversifying selection were identified: Node1, D20_233, and Node16. aBSREL will have generated four additional files named as \nPREFIX.extension\n where PREFIX is the file name chosed in step 10 above (here, PREFIX is \n/path/to/downloaded/example/files/HIV.nex.aBSREL\n):\n\n\n\n\nPREFIX.json\n: a JSON file storing all the relevant analysis output. You can visualize, explore, and obtain plots from this JSON file using the \nHyPhy Vision web application\n. \n\n\nPREFIX\n: a CSV file containing branch-by-branch output (similar to what is shown in the \nTable\n tab of the HyPhy Vision web application).\n\n\nPREFIX.mglocal.fit\n : A HyPhy batch file containing the model fit (including all parameter estimates) of \n[PHASE 0]\n (only branch variation). This is a NEXUS file with a private NEXUS HyPhy block.\n\n\nPREFIX.fit\n : A HyPhy batch file containing the model fit (including all parameter estimates) of \n[PHASE 2]\n (unconstrained branch-site model). This is a NEXUS file with a private NEXUS HyPhy block.\n\n\n\n\naBSREL: Test a subset of branches for selection\n#\n\n\nTo test for a specific selection of branches, you can modify step \n1.8\n from the previous aBSREL example to instead select one or more branches of interest to test for selection. All other aspects of analysis will remain the same, except runtime will be faster because fewer tests are performed.\n\n\n\n\n\n\nUse FUBAR to find sites which have experienced pervasive diversification.\n#\n\n\n\n\nFUBAR\n is described in \nMurrell et al.\n which is intended to supersede (owing to its remarkable speed and statistical performance), previous REL, SLAC, and and FEL methods (although note SLAC and FEL may still be used). Because of its exceptionally fast runtime, FUBAR is particularly useful for extremely large datasets.\n\n\n\n\nFor this example, we will run FUBAR on the dataset \nWestNileVirus_NS3.fas\n to identify sites which have experienced pervasive diversification over the entire tree. For reference, an analysis by \nBrault et al.\n using our older counting method \nSLAC\n found a single site (249) subject to pervasive positive selection.\n\n\n\n\n\n\nLaunch HyPhy from the command line by entering \nHYPHYMP\n. Provide the following options to the menu prompts:\n\n\n\n\nEnter \n12\n to select \nSelection/Recombination\n.\n\n\nEnter \n1\n to select \nDetect site-specific pervasive diversifying and purifying selection using the FUBAR (Fast Unbiased Bayesian AppRoximate) method on a multiple partition data set, e.g. produced by GARD.\n  Note that, as suggested by the text, FUBAR can account for the confounding effect of recombination, although it is not necessary to run GARD if recombination is not suspected.\n\n\nEnter \n1\n to select the Universal genetic code.\n\n\nEnter \n1\n to specify that a single dataset is being analyzed. Note that more could be specified, for example as outputted by GARD in the event of detected recombination.\n\n\nEnter the \nabsolute path\n to your dataset (in this case, a FASTA file with embedded tree): \n/path/to/downloaded/example/files/WestNileVirus_NS3.fas\n.      \n\n\nEnter \nY\n to confirm that HyPhy should use the tree provided in the dataset file. \n\n\n\n\n\n\n\n\nAt this point, FUBAR will begin to run interactively. Analysis phases will be performed with intermittent prompts asking for additional instructions.\n\n\n\n\n[FUBAR PHASE 1]\n: FUBAR wherein a nucleotide GTR model is fit to the data. Results from the GTR model fit are saved in the indicated file.\n\n\n\n\n\n\nOnce \n[FUBAR PHASE 1]\n is complete, enter \n20\n as the default grid size. This is the default FUBAR setting, meaning that a 20x20 grid of discrete \ndN\n and \ndS\n values will be used during selection inference. \n[FUBAR PHASE 2]\n will now proceed.\n\n\n\n\nOnce \n[FUBAR PHASE 2]\n is complete, respond to the following prompts:\n\n\n\n\nEnter \n5\n as the default number of MCMC chains to run. \n\n\nEnter \n2000000\n as the default length for each MCMC chain.\n\n\nEnter \n1000000\n as the default number of MCMC samples to discard as burnin.\n\n\nEnter \n100\n as the default number of samples to draw from each MCMC chain.\n\n\nEnter \n0.5\n as the default concentration parameter of the Dirichlet prior. \n[FUBAR PHASE 3]\n will now proceed to run the MCMC chains using these specified parameters. \n\n\n\n\n\n\n\n\nFinally, FUBAR will finish and provide a report of sites it identified under pervasive selection:\n\n\n\n\n\n\n[RESULTS] At posterior probability \n= 0.9 there were 1 sites under diversifying positive selection, of which  0.01 [0 - 0] are expected to be false positives.\n\nCodon   Prob[dN/dS\n1]   EBF[dN/dS]\n1    PSRF    N_eff\n249 0.9884428021898912  595.8810841395058   1.023623280459778   90.63329322769367\n\n\n\n\n\nThis output tells us that a single site, codon 249, has experienced diversifying positive selection (note that this is the same site as previously found by \nBrault et al.\n. FUBAR will have generated several additional files named \nPREFIX.extension\n, where PREFIX is the name of your datafile (here, PREFIX is \n/path/to/downloaded/example/files/WestNileVirus_NS3.fas\n):\n\n\n\n\nPREFIX.fubar.csv\n: \nThe primary result file\n is a CSV of site-specific inferences, including inferences rates (where \nalpha\n is \ndS\n and \nbeta\n is \ndN\n), and the column \nProb[alpha\nbeta]\n gives the posterior probability that this site is under positive diversifying selection.\n\n\nPREFIX.gtr_fit\n: A HyPhy batch file containing the nucleotide GTR model fit during \n[FUBAR PHASE 1]\n. This is a NEXUS file with a private NEXUS HyPhy block.\n\n\nPREFIX.codon_fit\n: A HyPhy batch file containing the \nMG94xREV\n model fit during \n[FUBAR PHASE 2]\n. This is a NEXUS file with a private NEXUS HyPhy block.\n\n\nPREFIX.samples*\n: Text files containing information pertaining to MCMC samples. Generally you will not need these files.\n\n\nPREFIX.grid_info\n: A text file containing information pertaining to the 20x20 rate grid. Generally you will not need this file.\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse MEME to find sites which have experienced episodic diversification.\n#\n\n\n\n\nMEME\n is described in \nMurrell et al.\n and is our default recommendation for finding individual sites under selection. It is MUCH slower than FUBAR, however, so there's room for both.\n\n\n\n\nFor this example, we will run MEME on the dataset \nWestNileVirus_NS3.fas\n to identify sites which have experienced episodic positive selection. Analyzing this data with MEME will find sites where selection operated along a subset of branches, while the rest of the tree may have been strongly conserved (in \naddition\n to the type of sites found by FUBAR). MEME tests each individual site separately; it runs quite slowly on a desktop, but very quickly on a cluster. You may also run MEME on \ndatamonkey\n to speed up the process. MEME requires a lot of user input (this is a legacy issue and will be addressed in the upcoming HyPhy v3 release).\n\n\n\n\nLaunch HyPhy from the command line by entering \nHYPHYMP\n. Provide the following options to the menu prompts:\n\n\nEnter \n10\n to select \nPositive Selection\n.\n\n\nEnter \n9\n to select \nQuickly test for positive selection using several approaches\n.\n\n\nEnter \n1\n to select the Universal genetic code.\n\n\nEnter \n1\n to indicate a New Analysis is being performed.\n\n\nEnter the \nabsolute path\n to your dataset (in this case, a FASTA file with embedded tree): \n/path/to/downloaded/example/files/WestNileVirus_NS3.fas\n.  \n\n\nEnter \n2\n to specify a Custom nucleotide model.\n\n\nEnter the string \n012345\n, which tells HyPhy to use the GTR mutation model as its custom nucleotide model (resulting in an \nMG94xREV\n fit.\n\n\nEnter \nY\n to confirm that HyPhy should use the tree provided in the dataset file. \n\n\nEnter a file name to save the (intermediate) GTR mutation model fit. For example, \n/path/to/downloaded/example/files/WestNileVirus_NS3.fas.nuc_fit\n is a good option. Generally, you will not need this file but it will be provided in case you wish to restart/repeat an analysis (Enter \n2\n in step 1.4 above).\n\n\nEnter \n5\n for \nEstimate dN/dS only\n \n\n\nEnter \n11\n to specify the MEME method. Note that, if you were to want to run the methods \nFEL\n or \nSLAC\n, you could instead enter \n5\n (FEL without \ndS\n variation), \n6\n (FEL with \ndS\n variation), or \n1\n (SLAC) at this prompt instead.\n\n\n\n\n\n\n\n\nHyPhy will now proceed to fit an initial nucleotide and global codon model, producing the following output:\n\n\n______________\nREAD\n \nTHE\n \nFOLLOWING\n \nDATA______________\n\n    \n19\n \nspecies\n:{\nRABENSBURG_ISOLATE\n,\nWNFCG\n,\nSPU116_89\n,\nKUNCG\n,\nITALY_1998_EQUINE\n,\nPAAN001\n,\nKN3829\n,\nRO97_50\n,\nVLG_4\n,\nAST99\n,\nPAH001\n,\nMEX03\n,\nIS_98\n,\nHNY1999\n,\nNY99_EQHS\n,\nNY99_FLAMINGO\n,\nETHAN4766\n,\nCHIN_01\n,\nEG101\n};\n\n    \nTotal\n \nSites\n:\n1857\n;\n\n    \nDistinct\n \nSites\n:\n357\n\n\n    \nPhase\n \n1\n:\nNucleotide\n \nModel\n \n(\n010010\n)\n \nModel\n \nFit\n\n\n    \n-\n7842.44514029565\n\n\n    \nPhase\n \n2\n:\nMG94x\n(\n010010\n)\n \nModel\n \nFit\n\n\n    \nPhase\n \n3\n:\nEstimating\n \ndN\n/\ndS\n\n\n    \nNuc\n-\ncodon\n \nscaling\n \nfactor\n:\n3.363225425621389\n\n    \nRaw\n \nscaling\n \nfactor\n:\n3.363225425621389\n\n    \nTree\n \nscaling\n \nfactor\n(\nS\n)\n:\n \n1\n\n\n    \nUsing\n \ndN\n/\ndS\n=\n0.02413010970256795\n\n    \nCodon\n \nmodel\n:\n-\n6578.11643060985\n\n\n\n\n\n\n\n\n\n\nYou will then see two additional prompts:\n\n\n\n\nEnter \n0.1\n (or any other reasonable threshold) as the Significance Level. Here, the default is 0.1 (rather than perhaps more traditional 0.05) because MEME is a conservative test on small alignments and 0.05 may be too stringent a threshold.\n\n\nEnter \nN\n to not save fit files for individual codons. These many files will generally not be needed.\n\n\n\n\n\n\n\n\nMEME will now run to completion and will print site-specific inferences to screen as they are completed, for example:\n\n\n[RETUNING BRANCH LENGTHS AND NUCLEOTIDE RATES UNDER THE CODON MODEL]\n\n\nIMPROVED Log(L) BY 125.2787507415687 POINTS\n\n\n| Codon:    1| Beta1:       0.00| P(Beta1):  0.93| Beta2:       0.00| P(Beta2):  0.07| alpha:       0.18| LRT:   0.00| p:  1.00| Log(L): -5.91\n\n\n| Codon:    2| Beta1:       0.00| P(Beta1):  0.93| Beta2:       0.00| P(Beta2):  0.07| alpha:       2.13| LRT:   0.00| p:  1.00| Log(L): -16.18\n\n\n| Codon:    3| Beta1:       0.00| P(Beta1):  0.93| Beta2:       0.00| P(Beta2):  0.07| alpha:       0.37| LRT:   0.00| p:  1.00| Log(L): -7.96\n\n\n| Codon:    4| Beta1:       0.00| P(Beta1):  0.93| Beta2:       0.00| P(Beta2):  0.07| alpha:       1.88| LRT:   0.00| p:  1.00| Log(L): -19.68\n\n\n\n\n\n\n\n\n\n\nWhen finished, MEME issues a final prompt for a CSV file name in which this site-specific information will be saved. For example, \n/path/to/downloaded/example/files/WestNileVirus_NS3.fas.MEME.csv\n is a good option to provide here. \n\n\n\n\n\n\nYou should now see the final output printed to the screen, corresponding to the codon(s) that MEME identified as under selection:\n\n\n\n\n\n\n| Codon:  249| Beta1:       0.86| P(Beta1):  0.00| Beta2:       2.50| P(Beta2):  1.00| alpha:       0.00| LRT:   7.62| p:  0.01| Log(L): -33.85 *P\n\n\n\n\n\nThis information, along with information for all other codon sites, will be in the final CSV file whose name you specified in step 3. Provided information in this output and in the CSV files includes the following columns:\n\n\n\n\nalpha\n: The estimate for the synonymous rate at the given site (\ndS\n). This value is shared across all branches.\n\n\nBeta1\n: The estimate for the first nonsynonymous rate (\ndN\n) category at the given site. By definition, this parameter is constrained as Beta1 \n alpha.\n\n\nP(Beta1)\n: The proportion of branches at the given site which MEME estimated to evolve with the rate Beta1.\n\n\nBeta2\n: The estimate for the second nonsynonymous rate (\ndN\n) category at the given site. By definition, this parameter is unconstrained (can be any value).\n\n\nP(Beta2)\n: The proportion of branches aat the given site which MEME estimated to evolve with the rate Beta2.\n\n\nLRT\n is the likelihood ratio test statistic obtained by testing the relative fit of the full model to the null model which constrains Beta2 \n alpha\n\n\np\n is the p-value for positive selection at this site. if \n*P\n is displayed at the end of the line, the p-value is at or below the selected threshold for positive selection.\n\n\n\n\n\n\n\n\n\n\n\n\n\nUse FEL or SLAC to find sites which have experienced pervasive diversification.\n#\n\n\n\n\nFEL\n and \nSLAC\n are described in \nPond and Frost\n. These are the original HyPhy methods for detecting individual sites under selection across the entire phylogeny. We strongly recommend using MEME or FUBAR instead of either of these methods, but they remain available if you still wish to use them.\n\n\n\n\nRunning FEL and SLAC require almost identical steps as MEME (see above). Therefore, you should begin a FEL/SLAC analysis by following menu prompt instructions 1.1-1.10, as described in the MEME tutorial. At step 1.11, you will be prompted to select a specific method for positive selection inference:\n\n\nRunning FEL\n#\n\n\n\n\nTo run FEL, enter either \n5\n (One-rate FEL, i.e. without \ndS\n variation) or \n6\n (Two-rate FEL, i.e. with \ndS\n variation) when you see the prompt \nAncestor Counting Options\n. For selection inference, we strongly recommend running a two-rate FEL (option \n6\n).\n\n\nHyPhy will proceed to fit the initial nucleotide and global codon models. You will then see a prompt for the Significance level, for which you may enter a preferred p-value threshold (default is \n0.1\n).\n\n\nIf you have selected option \n6\n for a two-rate FEL, you will see an additional prompt asking about \nBranch Options\n. To test the whole tree for selection, enter \n1\n here for \nAll branches\n. If you selected option \n5\n for a one-rate FEL, this prompt will not appear.\n\n\nEnter \n1\n to analyze all branches. \n\n\n\n\nFEL will now run to completion. As it runs, FEL will print site-specific inferences to the screen, for example:\n\n\n[RETUNING BRANCH LENGTHS AND NUCLEOTIDE RATES UNDER THE CODON MODEL]\n\n\nIMPROVED Log(L) BY 125.2787507415687 POINTS\n\n\n| Codon:    1| dN/dS:       0.00| dN:  0.00| dS:  0.18| dS(\n=\ndN):  0.05| Log(L):      -5.91| LRT:  2.38| p:  0.12\n\n\n| Codon:    2| dN/dS:       0.00| dN:  0.00| dS:  2.13| dS(\n=\ndN):  0.18| Log(L):     -16.18| LRT:  8.75| p:  0.00 *N\n\n\n| Codon:    3| dN/dS:       0.00| dN:  0.00| dS:  0.37| dS(\n=\ndN):  0.06| Log(L):      -7.96| LRT:  2.89| p:  0.09 *N\n\n\n| Codon:    4| dN/dS:       0.00| dN:  0.00| dS:  1.88| dS(\n=\ndN):  0.33| Log(L):     -19.68| LRT:  9.43| p:  0.00 *N\n\n\n\n\n\n\n\n\n\n\nWhen finished, FEL issues a final prompt for a CSV file name in which this site-specific information will be saved. For example, \n/path/to/downloaded/example/files/WestNileVirus_NS3.fas.FEL.csv\n is a good option to provide here.\n\n\n\n\n\n\nThis final FEL results file will have several columns:\n\n\n\n\nCodon\n: The codon site. \n\n\ndN/dS\n: The resulting \n\\omega\n estimate for this site.\n\n\ndN\n: The estimated \ndN\n parameter at this site. \n\n\ndS\n: The estimated \ndS\n parameter at this site. \n\n\ndS=dN\n: The rate estimate under the null model of evolution where the constraint \ndS=dN\n is enforced. Generally this is not needed. \n\n\nLRT\n: The likelihood ratio test statistic for comparing null and alternative models to test for selection.\n\n\np-value\n: The resulting p-value from the LRT used to test for selection. If this row shows a value \ndN/dS > 1\n and a p-value below your specified threshold, then the site is positively selected.\n\n\nFull Log(L)\n: The log likelihood for the alternative model fit. \n\n\n\n\nNote that one-rate FEL result files will only contain these columns:\n\n\n\n\ndN/dS\n\n\nLRT\n\n\np-value\n\n\nLog(L)\n. This column is the same as \nFull Log(L)\n, except with a different name.\n\n\n\n\nRunning SLAC\n#\n\n\n\n\nTo run SLAC, enter \n1\n when you see the prompt \nAncestor Counting Options\n, to select the option \nSingle Ancestor Counting\n.\n\n\nHyPhy will proceed to fit the initial nucleotide and global codon models. You will then see a prompt for \nSLAC Options\n, for which you should enter \n1\n for \nFull tree\n. The other choice, \nTips vs Internals\n, is mostly useful for certain viral sequence, e.g. influenza, analyses but is usually not relevant.\n\n\nEnter \n1\n to select \nAveraged\n treatment of ambiguities.\n\n\nEnter \n1\n for the \nApproximate\n test statistic.\n\n\nProvide the Significance level of \n0.1\n.\n\n\n\n\nSLAC will now run to completion, very quickly, and print site-specific information about selection inference. At the top of this printed information is a summary about sites determined to be under positive/negative selection. The top portion of this information should look like this:\n\n\n******* FOUND NO POSITIVELY SELECTED SITES ********\n\n******* FOUND 175 NEGATIVELY SELECTED SITES ********\n\n+--------------+--------------+--------------+--------------+\n| Index        | Site Index   | dN-dS        | p-value      | \n+--------------+--------------+--------------+--------------+\n|            1 |     2.000000 |    -3.000000 |     0.037037 |\n+--------------+--------------+--------------+--------------+\n|            2 |     4.000000 |    -2.571328 |     0.073792 |\n+--------------+--------------+--------------+--------------+\n\n\n\n\n\n\n\n\n\nFinally, You will then see a prompt for \nOutput Options\n where more detailed result information. Select option \n2\n to export result to file. You will then be prompted for a file name for this output (tab-delimited file). For example, \n/path/to/downloaded/example/files/WestNileVirus_NS3.fas.SLAC.txt\n is a good option to provide here.\n\n\n\n\n\n\nThis final SLAC results file will have several columns, where rows are ordered as codon sites in your alignment:\n\n\n\n\nObserved S Changes\n: The total \ncount\n of synonymous changes at this site\n\n\nObserved NS Changes\n: The total \ncount\n of nonsynonymous changes at this site\n\n\nE[S Sites]\n: The expected number of \"synonymous sites\" (i.e. opportunities for synoynymous change) at this site. This quantity is used to normalize synonymous substitution counts to obtain a \ndS\n value.\n\n\nE[NS Sites]\n: The expected number of \"nonsynonymous sites\" (i.e. opportunities for nonsynoynymous change) at this site. This quantity is used to normalize nonsynonymous substitution counts to obtain a \ndN\n value.\n\n\nObserved S. Prop.\n: The proportion of observed changes which were synonymous.\n\n\nP{S}\n: The proportion of substitutions expected to be synonymous under neutral evolutuion.\n\n\ndS\n: The estimated (by counting) dS value at this site.\n\n\ndN\n: The estimated (by counting) dN value at this site.\n\n\ndN-dS\n: The difference between dN and dS values.\n\n\nP{S leq. observed}\n: The probability of getting as many or \nfewer\n synonymous changes observed at this site, under a binomial distribution.\n\n\nP{S geq. observed}\n: The probability of getting as many or \nmore\n synonymous changes observed at this site, under a binomial distribution.\n\n\nScaled(dN-dS)\n: The difference between dN and dS values, normalized by the total tree length (sum of optimized branch lengths).\n\n\n\n\n\n\n\n\nUse RELAX to compare selective pressures on different parts of the tree\n#\n\n\n\n\nRELAX\n is a method described in \nWertheim et al\n. It is based on the \nBS-REL model\n branch site framework, but the tree is partitioned (a priori) into non-overlapping sets of branches, and the separate distributions of \n are fitted to each set and compared for relative \nrelaxation\n (\n values contract to 1) or \nintensification\n (\n values move away from 1).\n\n\n\n\nFor this example, we will run RELAX on the dataset \nHIV.nex\n, which includes partial clonal HIV-1 env sequences from epidemiologically linked partners (source/donor and recipient). We will specifically test if natural selection in the recipient (\nR\n branches) and in the source/donor (\nD\n branches) operate at different intensities. Importantly, this analysis will \nnot\n use the tree provided in \nHIV.nex\n, but instead a different tree available in the example file \nHIV-relax.nwk\n. This file contains a newick phylogeny whose branches have been annotated as either \n{Recipient}\n or \n{Donor}\n. These labels were applied using this web-based \nphylotree widget\n.\n\n\n\n\nLaunch HyPhy from the command line by entering \nHYPHYMP\n. Provide the following options to the menu prompts:\n\n\nEnter \n10\n to select \nPositive Selection\n.\n\n\nEnter \n10\n to select \nTest whether selected branches are under relaxed or intensified selection against reference branches\n.\n\n\nEnter \n1\n to select the Universal genetic code.\n\n\nEnter the \nabsolute path\n to your dataset (in this case, a NEXUS file): \n/path/to/downloaded/example/files/HIV.nex\n.\n\n\nEnter \nN\n to opt \nnot\n to use the tree found in the data file.\n\n\nEnter the \nabsolute path\n to the newick tree file which has been annotated for use in RELAX: \n/path/to/downloaded/example/files/HIV-relax.nwk\n.\n\n\nEnter \n3\n to select the branches labeled \nRecipient\n as your test set of branches (\"T set\").\n\n\nEnter \n2\n to select the branches labeled \nDonor\n as your reference set of branches (\"R set\").\n\n\nEnter \n2\n to execute only the \nMinimal\n analysis type. Note that entering \n1\n for \nAll\n tests will additionally run additional descriptive models described \nhere\n.\n\n\n\n\n\n\n\n\nRELAX will now begin to run and output information to the screen as it proceeds to completion:\n\n\n[RELAX] Obtaining branch lengths under the GTR model \n[RELAX] Log(L) = -2114.132338088236 \n[RELAX] Obtaining omega and branch length estimates under the partitioned MG94xGTR model \n[RELAX] Log(L) = -2076.093223041783 \n[RELAX] Fitting the RELAX null model \n[RELAX] Log(L) = -2031.204697143867 \n[RELAX] Fitting the RELAX alternative model \n[RELAX] Log(L) = -2024.075837744705. Relaxation parameter K = 0.4389230603260226 \n[RELAX] Likelihood ratio test for relaxation on Test branches, p = 0.0001594057084282063\n\n\n\n\n\nThe output provides several pieces of information:\n\n\n\n\nThe alternative model that selection was relaxed/intensified along the \"test\" branches significantly outperformed the null model with a P-value=\n1.59\\times10^{-4}\n, as assessed with the likelihood ratio test. \nWe therefore reject the null hypothesis that selection intensity has not shifted from the reference to the test branches.\n\n\nRELAX estimated the \nselection intensity parameter\n value of \nK=0.439\n (note that K=1 is RELAX's null hypothesis). Because K is \nless than 1\n, we can infer that selection \nwas relaxed/was weaker\n along the test than on the reference branches. In other words, \n\\omega\n rates \"shrank\" towards 1 on the test branches compared to the reference branches. \n\n\n\n\n\n\n\n\nLike in other analyses, HyPhy will generate a JSON file, in this case called \nHIV.nex.RELAX.json\n, in the same directory where the original dataset \nHIV.nex\n is located. This JSON file contains all the relevant analysis output, and can visualize, explore, and obtain plots from this JSON file using the \nHyPhy Vision web application\n. \n\n\n\n\n\n\nAutomating analyses\n#\n\n\nAll above examples use HyPhy interactively. This approach, however, may be exceptionally tedious if you have many datasets to analyze (or if you don't want to use HyPhy interactively). In this case, it would be better to automate analyses in HyPhy. The best way to accomplish this goal is by \npiping\n arguments (\n|\n symbol) into HyPhy. \n\n\nFor example, if you look through the BUSTED tutorial above, you will see these options provided to the interactive HyPhy session, in order:\n\n\n\n\n10\n \n\n\n4\n\n\n1\n \n\n\n/path/to/downloaded/example/files/HIV.nex\n  \n\n\nY\n\n\n1\n\n\nd\n\n\n\n\nYou can combine all of these input options in a single HyPhy call:\n\n\necho `(echo \n10\n; echo \n4\n; echo \n1\n; echo \n/path/to/downloaded/example/files/HIV.nex\n; echo \nY\n; echo \n1\n; echo \nd\n) | HYPHYMP`\n\n\n\n\n\nIf you have several datasets to analyze, a for-loop may come in handy:\n\n\n# Path to files of interest\nFILEPATH=/absolute/path/to/directory/with/all/your/files/\n\n# Run BUSTED on all files $FILEPATH/*.fas\nfor FILE in `ls $FILEPATH/*.fas`; do\n    echo \nRunning BUSTED on $FILE\n\n    echo `(echo \n10\n; echo \n4\n; echo \n1\n; echo $FILE; echo \nY\n; echo \n1\n; echo \nd\n) | HYPHYMP`\ndone", 
            "title": "Using HyPhy to Detect Selection"
        }, 
        {
            "location": "/tutorials/current-release-tutorial/#using-hyphy-to-detect-selection", 
            "text": "These tutorials outline how to prepare data and execute analyses in HyPhy's suite of methods for detecting natural selection in protein-coding alignments. Specifically, this tutorial explains how to use the  current release  of HyPhy from the  command line .  Before you begin   Install the current release of HyPhy on your computer, as needed, using  these instructions .  This tutorial employs example datasets, available for download as a   zip file . Unpack this zip file on your machine for use and  remember the absolute path to this directory .  This tutorial assumes you are specifically using the HyPhy executable  HYPHYMP . If you have installed a different executable (e.g.  HYPHYMPI ), you may need to alter some commands.  This tutorial uses the interactive HyPhy menu prompt to perform analyses. If you wish to automate many analyses instead of using HyPhy interactively, see the section  Automating Analyses  for modified instructions.", 
            "title": "Using HyPhy to detect selection."
        }, 
        {
            "location": "/tutorials/current-release-tutorial/#estimate-a-single-alignment-wide", 
            "text": "For this example, we will use HyPhy to estimate a single alignment-wide  \\omega  for the example dataset  WestNileVirus_NS3.fas . You can examine the contents of this file in a text editor. It contains a FASTA-formatted multiple sequence alignment followed by a corresponding newick-formatted tree.    Launch HyPhy from the command line by entering  HYPHYMP . Provide the following options to the menu prompts:   Enter  1  to select  Basic Analyses .  Enter  1  to select  Analyze codon data with a variety of standard models using a given tree.  Enter  1  to select the Universal genetic code.  Enter the  absolute path  to your alignment file:  /path/to/downloaded/example/files/WestNileVirus_NS3.fas .        This screen shows a variety of model options to fit to this dataset. We will use HyPhy's preferred model  MG94xREV . Select this option by entering  MG94CUSTOMCF3X4 .  Enter  2 , which tells HyPhy that the estimated  \\omega  should be shared across the entire alignment tree.  Enter the string  012345 , which tells HyPhy to use the GTR mutation model in the MG94 model.  Enter  Y  to confirm that HyPhy should use the tree provided in the alignment file.  Enter  Estimate  to tell HyPhy to use maximum likelihood to estimate and optimize branch lengths on the provided tree.     HyPhy will now perform your analysis, which should take several minutes (depending on your computer).     Once the analysis has completed, output that looks like this will appear:    ______________RESULTS______________  Log   Likelihood   =   -6413 . 50468184347 ;  Shared   Parameters :  R = 0 . 008557848966878849  GT = 0 . 2303600815210618  CT = 1 . 979989664067556  CG = 0 . 02076764883647483  AC = 0 . 2428440082030551  AT = 0 . 3056061615274677  Tree   givenTree =(((((( HNY1999 : 0 . 001101787189557129 , NY99_EQHS : 0 . 00108698796444847 ) Node6 : 0 , NY99_FLAMINGO : 0 ) Node5 : 0 , MEX03 : 0 . 003274397587748566 ) Node4 : 0 . 001043699094072735 , IS_98 : 0 . 002238969679775947 ) Node3 : 0 . 0108106327401535 , PAH001 : 0 . 009947231998139823 ) Node2 : 0 . 006480815229843424 , AST99 : 0 . 01679372620666718 ,(((( RABENSBURG_ISOLATE : 1 . 05102590132809 ,( WNFCG : 0 . 01053193289945618 , SPU116_89 : 0 . 00569613982107767 ) Node19 : 0 . 507068944265484 ) Node17 : 0 . 5772661357618611 , KUNCG : 0 . 08756311980263866 ) Node16 : 0 . 06947527827356371 ,( ETHAN4766 : 0 . 02385184540957046 ,( CHIN_01 : 0 . 01206163326344818 , EG101 : 0 . 01506055273715259 ) Node25 : 0 . 007681688497219724 ) Node23 : 0 . 003442808476468687 ) Node15 : 0 . 01851421610241251 ,((( ITALY_1998_EQUINE : 0 . 009037431851104481 , PAAN001 : 0 . 007872553578665653 ) Node30 : 0 . 002694356278175029 ,( RO97_50 : 0 . 001642931262019352 , VLG_4 : 0 . 00108305411902561 ) Node33 : 0 . 002794580801147744 ) Node29 : 0 . 0007243769694723316 , KN3829 : 0 . 003058011972423634 ) Node28 : 0 . 01097965849521703 ) Node14 : 0 . 00929314901848397 );   The  R  parameter represents your alignment-wide  \\omega .  Your result for this analysis is   = 0.00856.  Additional information reported here includes the following:   Log Likelihood  is the log likelihood of the model fit to your dataset.  Parameters named  GT ,  CT , etc. represent the nucleotide exchangeability rates inferred for the GTR mutation model component of the MG94 codon model.  Tree givenTree  is your provided tree with branch lengths have been optimized under the fitted MG94xREV model.", 
            "title": "Estimate a single alignment-wide &omega;."
        }, 
        {
            "location": "/tutorials/current-release-tutorial/#use-busted-to-test-for-alignment-wide-episodic-diversification", 
            "text": "BUSTED  is a method described in  Murrell et al . It has been extensively tested and shows better power and accuracy than either  \"branch-site\" models in PAML , or the  \"covarion\" style models .    For this example, we will run BUSTED on the dataset  HIV.nex , which includes partial clonal HIV-1 env sequences from epidemiologically linked partners (source/donor and recipient). We will run BUSTED in two ways:   Run BUSTED to test for selection across the entire tree.  Run BUSTED to test for selection on specific  a priori  selection of foreground branches.", 
            "title": "Use BUSTED to test for alignment-wide episodic diversification."
        }, 
        {
            "location": "/tutorials/current-release-tutorial/#busted-full-tree-analysis", 
            "text": "Launch HyPhy from the command line by entering  HYPHYMP . Provide the following options to the menu prompts:   Enter  10  to select  Positive Selection .  Enter  4  to select  Run the Branch-site Unrestricted Statistical Test for Episodic Diversification to test for evidence of episodic alignment-wide selective pressure.  Enter  1  to select the Universal genetic code.  Enter the  absolute path  to your dataset (in this case, a NEXUS file):  /path/to/downloaded/example/files/HIV.nex .        Enter  Y  to confirm that HyPhy should use the tree provided in the dataset file.  Enter  1  to select  All  branches to test for selection with BUSTED.  Enter  d  to indicate that your branch selection is complete.      BUSTED will now run for a few minutes, outputting various status indicators as it proceeds. Once BUSTED completes, the total output will look like this:    [BUSTED] Selected 26 branches as the test (foreground) set: R20_239,R20_245,Node5,R20_240,R20_238,R20_242,Node4,R20_241,Node3,R20_243,Node2,R20_244,Node1,D20_233,D20_235,D20_236,D20_232,Node17,D20_234,D20_237,Node21,Node16,D20_230,D20_231,Node24,Node15 \n[BUSTED] Obtaining initial branch lengths under the GTR model \n[BUSTED] Log(L) = -2114.132335772669 \n[BUSTED] Fitting the unconstrained branch-site model \n[BUSTED] Log(L) = -2039.992959126133. Unrestricted class omega = 104.6591567580357 (weight = 0.02032866068122922) \n[BUSTED] Fitting the branch-site model that disallows omega   1 among foreground branches \n[BUSTED] Log(L) = -2076.666683221396 \n[BUSTED] Likelihood ratio test for episodic positive selection, p = 1.110223024625157e-16   This result tells us a few things:   A proportion of sites ( \\sim 0.02032 ) is evolving with  \\omega > 1  a subset of the branches, although we do not know which branches specifically.  The performed Likelihood ratio test returned a P-value =1.11\\times10^{-16} . This result means that disallowing positive selection results in a  significantly worse fit  to the data.  We therefore reject the null hypothesis that there is no episodic positive selection the alignment.      In addition to this output, HyPhy has also generated a  JSON  containing a more detailed analysis output. The JSON will be written to same directory as the  input alignment file , with  BUSTED.json  appended to the file name. In this example the JSON file is named  /path/to/downloaded/example/files/HIV.nex.BUSTED.json . You can visualize, explore, and obtain plots from this JSON file using the  HyPhy Vision web application .", 
            "title": "BUSTED: Full tree analysis"
        }, 
        {
            "location": "/tutorials/current-release-tutorial/#busted-test-a-subset-of-branches-for-selection", 
            "text": "To test for a specific selection of branches, you can modify step  1.6  from the previous BUSTED example to instead select one or more branches of interest to define as the foreground set.   Alternatively, you can directly annotate your tree with the flag  {FG}  at specific nodes to indicate foreground branches. The most convenient way to annotate your tree is with the web-based  phylotree widget , as demonstrated:  .  If you label your tree in this manner, the branch selection prompt (step 1.6 above) will show a new menu where option  4  now tests only the foreground branches, rather than the full tree. All other aspects of the analysis will remain the same.  Example results for such an  a priori  analysis might look like the following:   [BUSTED] Selected 1 branches as the test (foreground) set: Node1 \n[BUSTED] Obtaining initial branch lengths under the GTR model \n[BUSTED] Log(L) = -2114.13233621422 \n[BUSTED] Fitting the unconstrained branch-site model \n[BUSTED] Log(L) = -2031.302017161514. Unrestricted class omega = 524.9720891747666 (weight = 0.07815647810018292) \n[BUSTED] Fitting the branch-site model that disallows omega   1 among foreground branches \n[BUSTED] Log(L) = -2050.101940483789 \n[BUSTED] Likelihood ratio test for episodic positive selection, p = 6.843795752331516e-09   Running BUSTED to test this specified branch set for selection tells us the following information:   A proportion of sites ( \\sim 0.078 ) is evolving with  \\omega > 1  on the  specified  set of foreground branch(es).  The performed Likelihood ratio test returned a P-value =6.84\\times10^{-9} . This result means that disallowing positive selection results in a  significantly worse fit  to the data.  We therefore reject the null hypothesis that there is no episodic positive selection on the specified foreground branch(es).", 
            "title": "BUSTED: Test a subset of branches for selection"
        }, 
        {
            "location": "/tutorials/current-release-tutorial/#use-absrel-to-find-lineages-which-have-experienced-episodic-diversification", 
            "text": "aBSREL  is a method described in  Smith et al . It is an extension of our popular  BS-REL model , which performs a complexity analysis and model selection prior to doing hypothesis testing. It runs much faster than BS-REL and has better statistical properies.   For this example, we will run aBSREL on the dataset  HIV.nex , which includes partial clonal HIV-1 env sequences from epidemiologically linked partners (source/donor and recipient). Note that this analysis differs from the BUSTED example described above because aBSREL will scan the phylogeny\nfor all the branches where selection may have operated. As with BUSTED, we will run aBSREL in two ways:   Run aBSREL to test for selection by scanning all branches in the tree.  Run BUSTED to test for selection by testing only an  a priori  selection of branches. This approach of analysis will have increased power to detect lineage-specific selection.", 
            "title": "Use aBSREL to find lineages which have experienced episodic diversification."
        }, 
        {
            "location": "/tutorials/current-release-tutorial/#absrel-full-tree-analysis", 
            "text": "Launch HyPhy from the command line by entering  HYPHYMP . Provide the following options to the menu prompts:   Enter  10  to select  Positive Selection .  Enter  1  to select  Use the random effects branch-site model (2010) to find lineages subject to episodic selection.  Enter  1  to select the Universal genetic code.  Enter  1  to use the aBSREL method (instead of the older BS-REL method)   Enter  2  to assume that synonymous rates ( dS ) do not vary across sites (only  dN  will vary). You may select option  1 , although aBSREL will run much more slowly without substantial benefit.   Enter the  absolute path  to your dataset (in this case, a NEXUS file):  /path/to/downloaded/example/files/HIV.nex .        Enter  Y  to confirm that HyPhy should use the tree provided in the dataset file.   Importantly , if you have modified the tree in this NEXUS file for use with BUSTED or RELAX (e.g. branch annotations),  enter   N  and instead provide the tree file  /path/to/downloaded/example/files/HIV.nwk  (a clean newick tree file) at the next menu prompt.     Enter  2  to select  All  branches to test for selection with aBSREL.  Enter  d  to indicate that your branch selection is complete.   Enter an  absolute path  to a file where aBSREL output should be saved, for example  /path/to/downloaded/example/files/HIV.nex.aBSREL .     The analysis will now run for several (many) minutes and produce a lot of diagnostic output while running, corresponding to aBSREL analysis stages:   [PHASE 0] : As the initial phase, aBSREL fits the standard  MG94xREV  model to estimate a single  \\omega  for each branch and prints out model fit statistics. This is the simplest model that can be selected by aBSREL.  [PHASE 1] : aBSREL then sorts all the branches by length (longest first), and tries to greedily add  \\omega  categories to one branch at a time, until the addition is no longer justified by AIC c  scores.  [INFERRED MODEL COMPLEXITY] : When aBSREL has determined the optimal number of  \\omega  categories at each branch, a summary of inferred model complexity will be printed to the screen.  [PHASE 2] : Next, aBSREL optimizes all model parameters for the branch models determined in  [PHASE 1] .  Next, aBSREL will test all the branches selected in step 1.8 above (in this example,  All  branches) to see if there is a proportion of sites\nwith  \\omega > 1  along that branch. aBSREL further assesses, using branch-specific Likelihood ratio tests, whether disallowing any categories of  \\omega>1  would result in a significantly worse fit to the data. Note that, as a shortcut, aBSREL will only perform the LRT for a branch if it indeed contained sites with  \\omega > 1 .  This is the most time consuming phase of the analysis.  aBSREL prints a running tally to the screen as tests proceed, including the rate distribution inferred for a particular branch under the null model (e.g.  \\omega \\leq 1 ) the branch's  uncorrected  p-value. Branches not tested will show p-value=0.5.     Once the analysis completes, aBSREL will print out the list of all branches with p-values below 0.05  after  \napplying the  Holm-Bonferroni multiple testing correction , and a CPU time report indicating how long each step of the analysis took:    Summary of branches under episodic selection (26 were tested, of which 14 required optimizations) :\n    Node1 p = 2.143165644952205e-10\n    Node16 p = 0.0002007962489750659\n    D20_233 p = 0.0006790829268799037\n\n\n === CPU TIME REPORT === \n    MG94 model fit : 00:00:52\n    Rate class complexity analysis : 00:04:58\n    aBSREL model fit : 00:01:46\n    Individual branch selection testing : 00:12:02\n    Total time : 00:28:26  Our aBSREL analysis determined that  three  branches with evidence of episodic diversifying selection were identified: Node1, D20_233, and Node16. aBSREL will have generated four additional files named as  PREFIX.extension  where PREFIX is the file name chosed in step 10 above (here, PREFIX is  /path/to/downloaded/example/files/HIV.nex.aBSREL ):   PREFIX.json : a JSON file storing all the relevant analysis output. You can visualize, explore, and obtain plots from this JSON file using the  HyPhy Vision web application .   PREFIX : a CSV file containing branch-by-branch output (similar to what is shown in the  Table  tab of the HyPhy Vision web application).  PREFIX.mglocal.fit  : A HyPhy batch file containing the model fit (including all parameter estimates) of  [PHASE 0]  (only branch variation). This is a NEXUS file with a private NEXUS HyPhy block.  PREFIX.fit  : A HyPhy batch file containing the model fit (including all parameter estimates) of  [PHASE 2]  (unconstrained branch-site model). This is a NEXUS file with a private NEXUS HyPhy block.", 
            "title": "aBSREL: Full tree analysis"
        }, 
        {
            "location": "/tutorials/current-release-tutorial/#absrel-test-a-subset-of-branches-for-selection", 
            "text": "To test for a specific selection of branches, you can modify step  1.8  from the previous aBSREL example to instead select one or more branches of interest to test for selection. All other aspects of analysis will remain the same, except runtime will be faster because fewer tests are performed.", 
            "title": "aBSREL: Test a subset of branches for selection"
        }, 
        {
            "location": "/tutorials/current-release-tutorial/#use-fubar-to-find-sites-which-have-experienced-pervasive-diversification", 
            "text": "FUBAR  is described in  Murrell et al.  which is intended to supersede (owing to its remarkable speed and statistical performance), previous REL, SLAC, and and FEL methods (although note SLAC and FEL may still be used). Because of its exceptionally fast runtime, FUBAR is particularly useful for extremely large datasets.   For this example, we will run FUBAR on the dataset  WestNileVirus_NS3.fas  to identify sites which have experienced pervasive diversification over the entire tree. For reference, an analysis by  Brault et al.  using our older counting method  SLAC  found a single site (249) subject to pervasive positive selection.    Launch HyPhy from the command line by entering  HYPHYMP . Provide the following options to the menu prompts:   Enter  12  to select  Selection/Recombination .  Enter  1  to select  Detect site-specific pervasive diversifying and purifying selection using the FUBAR (Fast Unbiased Bayesian AppRoximate) method on a multiple partition data set, e.g. produced by GARD.   Note that, as suggested by the text, FUBAR can account for the confounding effect of recombination, although it is not necessary to run GARD if recombination is not suspected.  Enter  1  to select the Universal genetic code.  Enter  1  to specify that a single dataset is being analyzed. Note that more could be specified, for example as outputted by GARD in the event of detected recombination.  Enter the  absolute path  to your dataset (in this case, a FASTA file with embedded tree):  /path/to/downloaded/example/files/WestNileVirus_NS3.fas .        Enter  Y  to confirm that HyPhy should use the tree provided in the dataset file.      At this point, FUBAR will begin to run interactively. Analysis phases will be performed with intermittent prompts asking for additional instructions.   [FUBAR PHASE 1] : FUBAR wherein a nucleotide GTR model is fit to the data. Results from the GTR model fit are saved in the indicated file.    Once  [FUBAR PHASE 1]  is complete, enter  20  as the default grid size. This is the default FUBAR setting, meaning that a 20x20 grid of discrete  dN  and  dS  values will be used during selection inference.  [FUBAR PHASE 2]  will now proceed.   Once  [FUBAR PHASE 2]  is complete, respond to the following prompts:   Enter  5  as the default number of MCMC chains to run.   Enter  2000000  as the default length for each MCMC chain.  Enter  1000000  as the default number of MCMC samples to discard as burnin.  Enter  100  as the default number of samples to draw from each MCMC chain.  Enter  0.5  as the default concentration parameter of the Dirichlet prior.  [FUBAR PHASE 3]  will now proceed to run the MCMC chains using these specified parameters.      Finally, FUBAR will finish and provide a report of sites it identified under pervasive selection:    [RESULTS] At posterior probability  = 0.9 there were 1 sites under diversifying positive selection, of which  0.01 [0 - 0] are expected to be false positives.\n\nCodon   Prob[dN/dS 1]   EBF[dN/dS] 1    PSRF    N_eff\n249 0.9884428021898912  595.8810841395058   1.023623280459778   90.63329322769367  This output tells us that a single site, codon 249, has experienced diversifying positive selection (note that this is the same site as previously found by  Brault et al. . FUBAR will have generated several additional files named  PREFIX.extension , where PREFIX is the name of your datafile (here, PREFIX is  /path/to/downloaded/example/files/WestNileVirus_NS3.fas ):   PREFIX.fubar.csv :  The primary result file  is a CSV of site-specific inferences, including inferences rates (where  alpha  is  dS  and  beta  is  dN ), and the column  Prob[alpha beta]  gives the posterior probability that this site is under positive diversifying selection.  PREFIX.gtr_fit : A HyPhy batch file containing the nucleotide GTR model fit during  [FUBAR PHASE 1] . This is a NEXUS file with a private NEXUS HyPhy block.  PREFIX.codon_fit : A HyPhy batch file containing the  MG94xREV  model fit during  [FUBAR PHASE 2] . This is a NEXUS file with a private NEXUS HyPhy block.  PREFIX.samples* : Text files containing information pertaining to MCMC samples. Generally you will not need these files.  PREFIX.grid_info : A text file containing information pertaining to the 20x20 rate grid. Generally you will not need this file.", 
            "title": "Use FUBAR to find sites which have experienced pervasive diversification."
        }, 
        {
            "location": "/tutorials/current-release-tutorial/#use-meme-to-find-sites-which-have-experienced-episodic-diversification", 
            "text": "MEME  is described in  Murrell et al.  and is our default recommendation for finding individual sites under selection. It is MUCH slower than FUBAR, however, so there's room for both.   For this example, we will run MEME on the dataset  WestNileVirus_NS3.fas  to identify sites which have experienced episodic positive selection. Analyzing this data with MEME will find sites where selection operated along a subset of branches, while the rest of the tree may have been strongly conserved (in  addition  to the type of sites found by FUBAR). MEME tests each individual site separately; it runs quite slowly on a desktop, but very quickly on a cluster. You may also run MEME on  datamonkey  to speed up the process. MEME requires a lot of user input (this is a legacy issue and will be addressed in the upcoming HyPhy v3 release).   Launch HyPhy from the command line by entering  HYPHYMP . Provide the following options to the menu prompts:  Enter  10  to select  Positive Selection .  Enter  9  to select  Quickly test for positive selection using several approaches .  Enter  1  to select the Universal genetic code.  Enter  1  to indicate a New Analysis is being performed.  Enter the  absolute path  to your dataset (in this case, a FASTA file with embedded tree):  /path/to/downloaded/example/files/WestNileVirus_NS3.fas .    Enter  2  to specify a Custom nucleotide model.  Enter the string  012345 , which tells HyPhy to use the GTR mutation model as its custom nucleotide model (resulting in an  MG94xREV  fit.  Enter  Y  to confirm that HyPhy should use the tree provided in the dataset file.   Enter a file name to save the (intermediate) GTR mutation model fit. For example,  /path/to/downloaded/example/files/WestNileVirus_NS3.fas.nuc_fit  is a good option. Generally, you will not need this file but it will be provided in case you wish to restart/repeat an analysis (Enter  2  in step 1.4 above).  Enter  5  for  Estimate dN/dS only    Enter  11  to specify the MEME method. Note that, if you were to want to run the methods  FEL  or  SLAC , you could instead enter  5  (FEL without  dS  variation),  6  (FEL with  dS  variation), or  1  (SLAC) at this prompt instead.     HyPhy will now proceed to fit an initial nucleotide and global codon model, producing the following output:  ______________ READ   THE   FOLLOWING   DATA______________ \n     19   species :{ RABENSBURG_ISOLATE , WNFCG , SPU116_89 , KUNCG , ITALY_1998_EQUINE , PAAN001 , KN3829 , RO97_50 , VLG_4 , AST99 , PAH001 , MEX03 , IS_98 , HNY1999 , NY99_EQHS , NY99_FLAMINGO , ETHAN4766 , CHIN_01 , EG101 }; \n     Total   Sites : 1857 ; \n     Distinct   Sites : 357 \n\n     Phase   1 : Nucleotide   Model   ( 010010 )   Model   Fit \n\n     - 7842.44514029565 \n\n     Phase   2 : MG94x ( 010010 )   Model   Fit \n\n     Phase   3 : Estimating   dN / dS \n\n     Nuc - codon   scaling   factor : 3.363225425621389 \n     Raw   scaling   factor : 3.363225425621389 \n     Tree   scaling   factor ( S ) :   1 \n\n     Using   dN / dS = 0.02413010970256795 \n     Codon   model : - 6578.11643060985     You will then see two additional prompts:   Enter  0.1  (or any other reasonable threshold) as the Significance Level. Here, the default is 0.1 (rather than perhaps more traditional 0.05) because MEME is a conservative test on small alignments and 0.05 may be too stringent a threshold.  Enter  N  to not save fit files for individual codons. These many files will generally not be needed.     MEME will now run to completion and will print site-specific inferences to screen as they are completed, for example:  [RETUNING BRANCH LENGTHS AND NUCLEOTIDE RATES UNDER THE CODON MODEL]  IMPROVED Log(L) BY 125.2787507415687 POINTS  | Codon:    1| Beta1:       0.00| P(Beta1):  0.93| Beta2:       0.00| P(Beta2):  0.07| alpha:       0.18| LRT:   0.00| p:  1.00| Log(L): -5.91  | Codon:    2| Beta1:       0.00| P(Beta1):  0.93| Beta2:       0.00| P(Beta2):  0.07| alpha:       2.13| LRT:   0.00| p:  1.00| Log(L): -16.18  | Codon:    3| Beta1:       0.00| P(Beta1):  0.93| Beta2:       0.00| P(Beta2):  0.07| alpha:       0.37| LRT:   0.00| p:  1.00| Log(L): -7.96  | Codon:    4| Beta1:       0.00| P(Beta1):  0.93| Beta2:       0.00| P(Beta2):  0.07| alpha:       1.88| LRT:   0.00| p:  1.00| Log(L): -19.68     When finished, MEME issues a final prompt for a CSV file name in which this site-specific information will be saved. For example,  /path/to/downloaded/example/files/WestNileVirus_NS3.fas.MEME.csv  is a good option to provide here.     You should now see the final output printed to the screen, corresponding to the codon(s) that MEME identified as under selection:    | Codon:  249| Beta1:       0.86| P(Beta1):  0.00| Beta2:       2.50| P(Beta2):  1.00| alpha:       0.00| LRT:   7.62| p:  0.01| Log(L): -33.85 *P  This information, along with information for all other codon sites, will be in the final CSV file whose name you specified in step 3. Provided information in this output and in the CSV files includes the following columns:   alpha : The estimate for the synonymous rate at the given site ( dS ). This value is shared across all branches.  Beta1 : The estimate for the first nonsynonymous rate ( dN ) category at the given site. By definition, this parameter is constrained as Beta1   alpha.  P(Beta1) : The proportion of branches at the given site which MEME estimated to evolve with the rate Beta1.  Beta2 : The estimate for the second nonsynonymous rate ( dN ) category at the given site. By definition, this parameter is unconstrained (can be any value).  P(Beta2) : The proportion of branches aat the given site which MEME estimated to evolve with the rate Beta2.  LRT  is the likelihood ratio test statistic obtained by testing the relative fit of the full model to the null model which constrains Beta2   alpha  p  is the p-value for positive selection at this site. if  *P  is displayed at the end of the line, the p-value is at or below the selected threshold for positive selection.", 
            "title": "Use MEME to find sites which have experienced episodic diversification."
        }, 
        {
            "location": "/tutorials/current-release-tutorial/#use-fel-or-slac-to-find-sites-which-have-experienced-pervasive-diversification", 
            "text": "FEL  and  SLAC  are described in  Pond and Frost . These are the original HyPhy methods for detecting individual sites under selection across the entire phylogeny. We strongly recommend using MEME or FUBAR instead of either of these methods, but they remain available if you still wish to use them.   Running FEL and SLAC require almost identical steps as MEME (see above). Therefore, you should begin a FEL/SLAC analysis by following menu prompt instructions 1.1-1.10, as described in the MEME tutorial. At step 1.11, you will be prompted to select a specific method for positive selection inference:", 
            "title": "Use FEL or SLAC to find sites which have experienced pervasive diversification."
        }, 
        {
            "location": "/tutorials/current-release-tutorial/#running-fel", 
            "text": "To run FEL, enter either  5  (One-rate FEL, i.e. without  dS  variation) or  6  (Two-rate FEL, i.e. with  dS  variation) when you see the prompt  Ancestor Counting Options . For selection inference, we strongly recommend running a two-rate FEL (option  6 ).  HyPhy will proceed to fit the initial nucleotide and global codon models. You will then see a prompt for the Significance level, for which you may enter a preferred p-value threshold (default is  0.1 ).  If you have selected option  6  for a two-rate FEL, you will see an additional prompt asking about  Branch Options . To test the whole tree for selection, enter  1  here for  All branches . If you selected option  5  for a one-rate FEL, this prompt will not appear.  Enter  1  to analyze all branches.    FEL will now run to completion. As it runs, FEL will print site-specific inferences to the screen, for example:  [RETUNING BRANCH LENGTHS AND NUCLEOTIDE RATES UNDER THE CODON MODEL]  IMPROVED Log(L) BY 125.2787507415687 POINTS  | Codon:    1| dN/dS:       0.00| dN:  0.00| dS:  0.18| dS( = dN):  0.05| Log(L):      -5.91| LRT:  2.38| p:  0.12  | Codon:    2| dN/dS:       0.00| dN:  0.00| dS:  2.13| dS( = dN):  0.18| Log(L):     -16.18| LRT:  8.75| p:  0.00 *N  | Codon:    3| dN/dS:       0.00| dN:  0.00| dS:  0.37| dS( = dN):  0.06| Log(L):      -7.96| LRT:  2.89| p:  0.09 *N  | Codon:    4| dN/dS:       0.00| dN:  0.00| dS:  1.88| dS( = dN):  0.33| Log(L):     -19.68| LRT:  9.43| p:  0.00 *N     When finished, FEL issues a final prompt for a CSV file name in which this site-specific information will be saved. For example,  /path/to/downloaded/example/files/WestNileVirus_NS3.fas.FEL.csv  is a good option to provide here.    This final FEL results file will have several columns:   Codon : The codon site.   dN/dS : The resulting  \\omega  estimate for this site.  dN : The estimated  dN  parameter at this site.   dS : The estimated  dS  parameter at this site.   dS=dN : The rate estimate under the null model of evolution where the constraint  dS=dN  is enforced. Generally this is not needed.   LRT : The likelihood ratio test statistic for comparing null and alternative models to test for selection.  p-value : The resulting p-value from the LRT used to test for selection. If this row shows a value  dN/dS > 1  and a p-value below your specified threshold, then the site is positively selected.  Full Log(L) : The log likelihood for the alternative model fit.    Note that one-rate FEL result files will only contain these columns:   dN/dS  LRT  p-value  Log(L) . This column is the same as  Full Log(L) , except with a different name.", 
            "title": "Running FEL"
        }, 
        {
            "location": "/tutorials/current-release-tutorial/#running-slac", 
            "text": "To run SLAC, enter  1  when you see the prompt  Ancestor Counting Options , to select the option  Single Ancestor Counting .  HyPhy will proceed to fit the initial nucleotide and global codon models. You will then see a prompt for  SLAC Options , for which you should enter  1  for  Full tree . The other choice,  Tips vs Internals , is mostly useful for certain viral sequence, e.g. influenza, analyses but is usually not relevant.  Enter  1  to select  Averaged  treatment of ambiguities.  Enter  1  for the  Approximate  test statistic.  Provide the Significance level of  0.1 .   SLAC will now run to completion, very quickly, and print site-specific information about selection inference. At the top of this printed information is a summary about sites determined to be under positive/negative selection. The top portion of this information should look like this:  ******* FOUND NO POSITIVELY SELECTED SITES ********\n\n******* FOUND 175 NEGATIVELY SELECTED SITES ********\n\n+--------------+--------------+--------------+--------------+\n| Index        | Site Index   | dN-dS        | p-value      | \n+--------------+--------------+--------------+--------------+\n|            1 |     2.000000 |    -3.000000 |     0.037037 |\n+--------------+--------------+--------------+--------------+\n|            2 |     4.000000 |    -2.571328 |     0.073792 |\n+--------------+--------------+--------------+--------------+    Finally, You will then see a prompt for  Output Options  where more detailed result information. Select option  2  to export result to file. You will then be prompted for a file name for this output (tab-delimited file). For example,  /path/to/downloaded/example/files/WestNileVirus_NS3.fas.SLAC.txt  is a good option to provide here.    This final SLAC results file will have several columns, where rows are ordered as codon sites in your alignment:   Observed S Changes : The total  count  of synonymous changes at this site  Observed NS Changes : The total  count  of nonsynonymous changes at this site  E[S Sites] : The expected number of \"synonymous sites\" (i.e. opportunities for synoynymous change) at this site. This quantity is used to normalize synonymous substitution counts to obtain a  dS  value.  E[NS Sites] : The expected number of \"nonsynonymous sites\" (i.e. opportunities for nonsynoynymous change) at this site. This quantity is used to normalize nonsynonymous substitution counts to obtain a  dN  value.  Observed S. Prop. : The proportion of observed changes which were synonymous.  P{S} : The proportion of substitutions expected to be synonymous under neutral evolutuion.  dS : The estimated (by counting) dS value at this site.  dN : The estimated (by counting) dN value at this site.  dN-dS : The difference between dN and dS values.  P{S leq. observed} : The probability of getting as many or  fewer  synonymous changes observed at this site, under a binomial distribution.  P{S geq. observed} : The probability of getting as many or  more  synonymous changes observed at this site, under a binomial distribution.  Scaled(dN-dS) : The difference between dN and dS values, normalized by the total tree length (sum of optimized branch lengths).", 
            "title": "Running SLAC"
        }, 
        {
            "location": "/tutorials/current-release-tutorial/#use-relax-to-compare-selective-pressures-on-different-parts-of-the-tree", 
            "text": "RELAX  is a method described in  Wertheim et al . It is based on the  BS-REL model  branch site framework, but the tree is partitioned (a priori) into non-overlapping sets of branches, and the separate distributions of   are fitted to each set and compared for relative  relaxation  (  values contract to 1) or  intensification  (  values move away from 1).   For this example, we will run RELAX on the dataset  HIV.nex , which includes partial clonal HIV-1 env sequences from epidemiologically linked partners (source/donor and recipient). We will specifically test if natural selection in the recipient ( R  branches) and in the source/donor ( D  branches) operate at different intensities. Importantly, this analysis will  not  use the tree provided in  HIV.nex , but instead a different tree available in the example file  HIV-relax.nwk . This file contains a newick phylogeny whose branches have been annotated as either  {Recipient}  or  {Donor} . These labels were applied using this web-based  phylotree widget .   Launch HyPhy from the command line by entering  HYPHYMP . Provide the following options to the menu prompts:  Enter  10  to select  Positive Selection .  Enter  10  to select  Test whether selected branches are under relaxed or intensified selection against reference branches .  Enter  1  to select the Universal genetic code.  Enter the  absolute path  to your dataset (in this case, a NEXUS file):  /path/to/downloaded/example/files/HIV.nex .  Enter  N  to opt  not  to use the tree found in the data file.  Enter the  absolute path  to the newick tree file which has been annotated for use in RELAX:  /path/to/downloaded/example/files/HIV-relax.nwk .  Enter  3  to select the branches labeled  Recipient  as your test set of branches (\"T set\").  Enter  2  to select the branches labeled  Donor  as your reference set of branches (\"R set\").  Enter  2  to execute only the  Minimal  analysis type. Note that entering  1  for  All  tests will additionally run additional descriptive models described  here .     RELAX will now begin to run and output information to the screen as it proceeds to completion:  [RELAX] Obtaining branch lengths under the GTR model \n[RELAX] Log(L) = -2114.132338088236 \n[RELAX] Obtaining omega and branch length estimates under the partitioned MG94xGTR model \n[RELAX] Log(L) = -2076.093223041783 \n[RELAX] Fitting the RELAX null model \n[RELAX] Log(L) = -2031.204697143867 \n[RELAX] Fitting the RELAX alternative model \n[RELAX] Log(L) = -2024.075837744705. Relaxation parameter K = 0.4389230603260226 \n[RELAX] Likelihood ratio test for relaxation on Test branches, p = 0.0001594057084282063  The output provides several pieces of information:   The alternative model that selection was relaxed/intensified along the \"test\" branches significantly outperformed the null model with a P-value= 1.59\\times10^{-4} , as assessed with the likelihood ratio test.  We therefore reject the null hypothesis that selection intensity has not shifted from the reference to the test branches.  RELAX estimated the  selection intensity parameter  value of  K=0.439  (note that K=1 is RELAX's null hypothesis). Because K is  less than 1 , we can infer that selection  was relaxed/was weaker  along the test than on the reference branches. In other words,  \\omega  rates \"shrank\" towards 1 on the test branches compared to the reference branches.      Like in other analyses, HyPhy will generate a JSON file, in this case called  HIV.nex.RELAX.json , in the same directory where the original dataset  HIV.nex  is located. This JSON file contains all the relevant analysis output, and can visualize, explore, and obtain plots from this JSON file using the  HyPhy Vision web application .", 
            "title": "Use RELAX to compare selective pressures on different parts of the tree"
        }, 
        {
            "location": "/tutorials/current-release-tutorial/#automating-analyses", 
            "text": "All above examples use HyPhy interactively. This approach, however, may be exceptionally tedious if you have many datasets to analyze (or if you don't want to use HyPhy interactively). In this case, it would be better to automate analyses in HyPhy. The best way to accomplish this goal is by  piping  arguments ( |  symbol) into HyPhy.   For example, if you look through the BUSTED tutorial above, you will see these options provided to the interactive HyPhy session, in order:   10    4  1    /path/to/downloaded/example/files/HIV.nex     Y  1  d   You can combine all of these input options in a single HyPhy call:  echo `(echo  10 ; echo  4 ; echo  1 ; echo  /path/to/downloaded/example/files/HIV.nex ; echo  Y ; echo  1 ; echo  d ) | HYPHYMP`  If you have several datasets to analyze, a for-loop may come in handy:  # Path to files of interest\nFILEPATH=/absolute/path/to/directory/with/all/your/files/\n\n# Run BUSTED on all files $FILEPATH/*.fas\nfor FILE in `ls $FILEPATH/*.fas`; do\n    echo  Running BUSTED on $FILE \n    echo `(echo  10 ; echo  4 ; echo  1 ; echo $FILE; echo  Y ; echo  1 ; echo  d ) | HYPHYMP`\ndone", 
            "title": "Automating analyses"
        }, 
        {
            "location": "/tutorials/dev-branch-tutorial/", 
            "text": "HyPhy v2.3 Quick Start\n#\n\n\n\n\nCAUTION:\n This tutorial is for the development branch of HyPhy only! This tutorial is \nnot compatible\n with the current release. Please see \nthis tutorial\n for information on using the current HyPhy release.\n\n\n\n\nThis tutorial outlines how to prepare data and execute analyses for use in the following methods:\n\n\n\n\nRELAX\n\n\nBUSTED\n\n\nFEL\n\n\n\n\nNote that you can additional use these methods via \nthe development version of Datamonkey\n (RELAX and BUSTED) or \nthe current version of Datamonkey\n (FEL).\n\n\nIf you do not have a dataset to work with, you might find it convenient to\ndownload this \nzip file\n with some example datasets.\n\n\n\n\nInstallation\n#\n\n\n\n\nCAUTION\n \n: This is for the development branch of HyPhy only!\n \n\n\n\n\nDependencies\n#\n\n\n\n\ncmake \n 3.0\n\n\n\n\nCommands\n#\n\n\nBuild the development branch of HyPhy on your system by issuing the following commands. \n\n\ngit clone https://github.com/veg/hyphy.git\ncd hyphy\ngit checkout v2.3-dev\ncmake .       # Requires version \n 3.0\nmake MP      # openMP should be installed in your system for optimal performance\n# For faster make, try \nmake -j MP\n. \n\n\n\n\n\nDo not run\n \nmake install\n as you will encounter conflicts with any other HyPhy versions installed in your system.\n\n\nCheck that the HyPhy build was successful using the following command \nissued from the\n \nhyphy/\n \ndirectory\n:\n\n\n./HYPHYMP LIBPATH=`pwd`/res ./tests/hbltests/libv3/math.bf\n\n\n\n\n\nIf HyPhy is working correctly, you should see the following output:\n\n\n{\n \nCount\n:4,\n \nMean\n:2.25,\n \nMedian\n:2,\n \nMin\n:1,\n \nMax\n:4,\n \n2.5%\n:1,\n \n97.5%\n:4,\n \nSum\n:9,\n \nStd.Dev\n:1.089724735885168,\n \nVariance\n:1.1875,\n \nCOV\n:0.4843221048378527,\n \nSkewness\n:0.6520236646847543,\n \nKurtosis\n:2.096952908587258,\n \nSq. sum\n:18,\n \nNon-negative\n:4\n}\n\n\n\n\n\nNote that all examples below will assume that a tree has \nnot\n been defined within your dataset (e.g. FASTA or NEXUS) file. If you opt to use a data file that contains a tree, some of the prompts may change. Specifically, you will not need to provide HyPhy with a separate file containing a tree, but you will have to confirm that HyPhy should use the provided tree.\n\n\nUse RELAX to compare selective pressures on different parts of the tree\n#\n\n\n\n\nRELAX is a method described in \nWertheim et al\n. It is based on the \nBS-REL model\n branch site framework, but the tree is partitioned (a priori) into non-overlapping sets of branches. Separate distributions of \n\\omega\n are fitted to each set and compared for relative \nrelaxation\n (\n\\omega\n values contract to 1) or \nintensification\n (\n\\omega\n values move away from 1) of selection pressure. \n\n\n\n\nNote that you can use RELAX via \nDatamonkey\n, you can or follow \nthis tutorial\n to use RELAX in the current version of HyPhy. Otherwise, follow these directions to run RELAX in the development branch of HyPhy:\n\n\n\n\n\n\nTo use RELAX, you must first prepare your data by partitioning branches into two sets of non-overlapping branches: The \nreference\n branch set and the \ntest\n branch set. The RELAX test for relaxation/intensification of selection pressure will be run on the \ntest\n branches relative to the baseline \nreference\n branches. The easiest way to partition your newick tree is using the web-based \nphylotree application\n, as demonstrated:\n\n\n\n\n\n\n\n\nLaunch a terminal session and navigate to the directory where you have compiled the development version of HyPhy. \nFrom within this directory\n, issue the following command to run RELAX and respond to the prompts. Be sure to provide \nabsolute paths\n for all file names prompted.\n\n\n./HYPHYMP LIBPATH=`pwd`/res res/TemplateBatchFiles/SelectionAnalyses/RELAX.bf\n\n\n\n\n\n\n\n\n\nAlternatively, you can pipe the arguments directly into the HyPhy call to RELAX.\n\n\n./HYPHYMP LIBPATH=`pwd`/res res/TemplateBatchFiles/SelectionAnalyses/RELAX.bf\n\n\n\n\n\n\n\n\n\nIn the above example, the piped arguments correspond to the following:\n\n\n\n\n1\n - Select the Universal Code\n\n\npath to sequence file\n - the \nabsolute path\n/filename of the multiple sequence alignment\n\n\npath to tree file\n - the \nabsolute path\n/filename of the labeled newick tree\n\n\n3\n - Selects tagged partition for testing relaxed selection\n\n\n2\n - Selects tagged partition for reference branches\n\n\n1\n - Fits descriptive models and run the relax test (4 models) as opposed to a minimal RELAX test (2 models)\n\n\n\n\n\n\n\n\n\n\n\n\nOnce the RELAX job is completed, there will be a file that is generated in the\nsame directory as the sequence file named \nsequence-file\n.RELAX.json\n. The file is standard JSON, and can be parsed with any programming language. You can also visualize, explore, and obtain plots from this JSON file using the \nHyPhy Vision web application\n. \n\n\n\n\n\n\nUse BUSTED to test for alignment-wide episodic diversification\n#\n\n\n\n\nBUSTED\n is a method described in \nMurrell et al\n. It has been extensively tested and shows better power and accuracy than either \n\"branch-site\" models in PAML\n, or the \n\"covarion\" style models\n. \n\n\n\n\nNote that you can use BUSTED via \nDatamonkey\n, you can or follow \nthis tutorial\n to use BUSTED in the current version of HyPhy. Otherwise, follow these directions to run BUSTED in the development branch of HyPhy:\n\n\n\n\n\n\nIf you would like to use BUSTED to test specific foreground branches for episodic selection, you must prepare your newick phylogeny with annotated branches. To accomplish this, we recommend using the web-based \nphylotree widget\n, as demonstrated below. Export and save this annotated tree for use in BUSTED. Alternatively, you can analyze the entire tree for episodic diversification, in which case branch annotation is not needed and a \"regular\" newick tree will be fine.\n\n\n \n\n\n\n\n\n\nLaunch a terminal session and navigate to the directory where you have compiled the development version of HyPhy. \nFrom within this directory\n, issue the following command to run BUSTED and respond to the prompts. Be sure to provide \nabsolute paths\n for all file names prompted.\n\n\n./HYPHYMP LIBPATH=`pwd`/res res/TemplateBatchFiles/SelectionAnalyses/BUSTED.bf\n\n\n\n\n\n\n\n\n\nAlternatively, you can pipe the arguments directly into the HyPhy call to BUSTED. Note that, as written, this command will instruct BUSTED to consider all branches as foreground:\n\n\n(echo 1; echo \npath to sequence file\n; echo \npath to tree file\n; echo 4; echo d) | ./HYPHYMP LIBPATH=`pwd`/res res/TemplateBatchFiles/SelectionAnalyses/RELAX.bf\n\n\n\n\n\n\n\n\n\nIn the above example, the piped arguments correspond to the following:\n\n\n\n\n1\n - Select the Universal Code\n\n\npath to sequence file\n - the \nabsolute path\n/filename of the multiple sequence alignment\n\n\npath to tree file\n - the \nabsolute path\n/filename of the labeled newick tree\n\n\n4\n - Test for selection on all branches labeled with {FOREGROUND} jointly\n\n\nd\n - Complete branch selection\n\n\n\n\n\n\n\n\n\n\n\n\nOnce the BUSTED job is completed, there will be a file that is generated in the\nsame directory as the sequence file named \nsequence-file\n.BUSTED.json\n. The file is standard JSON, and can be parsed with any programming language. You can also visualize, explore, and obtain plots from this JSON file using the \nHyPhy Vision web application\n. \n\n\nFEL - Fixed Effects Model for detecting site-wise selective pressure\n#\n\n\n\n\n\n\nFEL\n is described in \nPond and Frost\n. FEL estimates\nsite-wise synonymous (\n\\alpha\n) and non-synonymous (\n\\beta\n) rates, and uses a\nlikelihood ratio test to determine if \n\\beta \\neq \\alpha\n at each site. The estimates\naggregate information over all branches, so the signal is derived from\npervasive diversification or conservation.\n\n\n\n\nNote that you can use FEL via \nDatamonkey\n, you can or follow \nthis tutorial\n to use FEL in the current version of HyPhy. Otherwise, follow these directions to run FEL in the development branch of HyPhy:\n\n\nPlease also note that FEL is an MPI-aware script. You are free to use HYPHYMPI (instead of HYPHYMP) in conjunction with mpirun on computing clusters for improved performance.\n\n\n\n\n\n\nLaunch a terminal session and navigate to the directory where you have compiled the development version of HyPhy. \nFrom within this directory\n, issue the following command to run BUSTED and respond to the prompts. Be sure to provide \nabsolute paths\n for all file names prompted.\n\n\n./HYPHYMP LIBPATH=`pwd`/res res/TemplateBatchFiles/SelectionAnalyses/FEL.bf\n\n\n\n\n\n\n\n\n\nAlternatively, you can pipe the arguments directly into the HyPhy call to BUSTED. Note that, as written, this command will instruct BUSTED to consider all branches as foreground:\n\n\n(echo 1; echo \npath to sequence file\n; echo \npath to tree file\n; echo 1; echo 0.1) | ./HYPHYMP LIBPATH=`pwd`/res res/TemplateBatchFiles/SelectionAnalyses/FEL.bf\n\n\n\n\n\n\n\n\n\nIn the above example, the piped arguments correspond to the following:\n\n\n\n\n1\n - Select the Universal Code\n\n\npath to sequence file\n - the \nabsolute path\n/filename of the multiple sequence alignment\n\n\npath to tree file\n - the \nabsolute path\n/filename of the labeled newick tree\n\n\n1\n - Include all branches in the analysis\n\n\n0.1\n - Significance (p-value) threshold for identifying selected sites\n\n\n\n\n\n\n\n\n\n\n\n\nFEL will now run to completion. While running, it will print out a table of site-specific inferences specifically for those sounds found to be under selection (either negative or positive):\n\n\n|\n     \nCodon\n      \n|\n   \nPartition\n    \n|\n     \nalpha\n      \n|\n      \nbeta\n      \n|\n      \nLRT\n       \n|\nSelection\n \ndetected?\n|\n\n\n|:-\n-------------:\n|:-\n-------------:\n|:-\n-------------:\n|:-\n-------------:\n|:-\n-------------:\n|:-\n----------------:\n|\n\n\n|\n       \n12\n       \n|\n       \n1\n        \n|\n       \n10.917\n   \n|\n        \n0.000\n   \n|\n        \n2.931\n   \n|\n  \nNeg\n.\n \np\n \n=\n \n0.0869\n  \n|\n\n\n|\n       \n18\n       \n|\n       \n1\n        \n|\n       \n54.146\n   \n|\n        \n0.000\n   \n|\n        \n8.159\n   \n|\n  \nNeg\n.\n \np\n \n=\n \n0.0043\n  \n|\n\n\n|\n       \n20\n       \n|\n       \n1\n        \n|\n       \n25.068\n   \n|\n        \n0.000\n   \n|\n        \n2.827\n   \n|\n  \nNeg\n.\n \np\n \n=\n \n0.0927\n  \n|\n\n\n|\n       \n88\n       \n|\n       \n1\n        \n|\n       \n37.678\n   \n|\n        \n0.000\n   \n|\n        \n4.004\n   \n|\n  \nNeg\n.\n \np\n \n=\n \n0.0454\n  \n|\n\n\n|\n       \n93\n       \n|\n       \n1\n        \n|\n       \n26.041\n   \n|\n        \n0.000\n   \n|\n        \n3.142\n   \n|\n  \nNeg\n.\n \np\n \n=\n \n0.0763\n  \n|\n\n\n|\n      \n101\n       \n|\n       \n1\n        \n|\n        \n9.866\n   \n|\n        \n0.000\n   \n|\n        \n2.894\n   \n|\n  \nNeg\n.\n \np\n \n=\n \n0.0889\n  \n|\n\n\n|\n      \n134\n       \n|\n       \n1\n        \n|\n       \n25.423\n   \n|\n        \n0.000\n   \n|\n        \n3.949\n   \n|\n  \nNeg\n.\n \np\n \n=\n \n0.0469\n  \n|\n\n\n|\n      \n159\n       \n|\n       \n1\n        \n|\n       \n23.622\n   \n|\n        \n0.000\n   \n|\n        \n3.895\n   \n|\n  \nNeg\n.\n \np\n \n=\n \n0.0484\n  \n|\n\n\n\n\n\n\nThese columns are as follows:\n\n\n\n\nCodon\n: The codon site. \n\n\nPartition\n: The partition for this codon. If the analysis was not partitioned, all codons are in partition 1.\n\n\nalpha\n: The estimated \ndS\n parameter at this site. \n\n\nbeta\n: The estimated \ndN\n parameter at this site. \n\n\nLRT\n: The likelihood ratio test statistic for comparing null and alternative models to test for selection.\n\n\nSelection Detected?\n: Indicates whether this site shows evidence for negative (\nNeg.\n) or positive (\nPos.\n) selection and the associated p-value.\n\n\n\n\n\n\n\n\nOnce the FEL job is completed, there will be a file that is generated in the\nsame directory as the sequence file named \nsequence-file\n.fel.json\n. The file is standard JSON, and can be parsed with any programming language. Currently it is not possible to explore this JSON with HyPhy Vision although this functionality is expected soon.", 
            "title": "v2.3 Quick Start"
        }, 
        {
            "location": "/tutorials/dev-branch-tutorial/#hyphy-v23-quick-start", 
            "text": "CAUTION:  This tutorial is for the development branch of HyPhy only! This tutorial is  not compatible  with the current release. Please see  this tutorial  for information on using the current HyPhy release.   This tutorial outlines how to prepare data and execute analyses for use in the following methods:   RELAX  BUSTED  FEL   Note that you can additional use these methods via  the development version of Datamonkey  (RELAX and BUSTED) or  the current version of Datamonkey  (FEL).  If you do not have a dataset to work with, you might find it convenient to\ndownload this  zip file  with some example datasets.", 
            "title": "HyPhy v2.3 Quick Start"
        }, 
        {
            "location": "/tutorials/dev-branch-tutorial/#installation", 
            "text": "CAUTION   : This is for the development branch of HyPhy only!", 
            "title": "Installation"
        }, 
        {
            "location": "/tutorials/dev-branch-tutorial/#dependencies", 
            "text": "cmake   3.0", 
            "title": "Dependencies"
        }, 
        {
            "location": "/tutorials/dev-branch-tutorial/#commands", 
            "text": "Build the development branch of HyPhy on your system by issuing the following commands.   git clone https://github.com/veg/hyphy.git\ncd hyphy\ngit checkout v2.3-dev\ncmake .       # Requires version   3.0\nmake MP      # openMP should be installed in your system for optimal performance\n# For faster make, try  make -j MP .   Do not run   make install  as you will encounter conflicts with any other HyPhy versions installed in your system.  Check that the HyPhy build was successful using the following command  issued from the   hyphy/   directory :  ./HYPHYMP LIBPATH=`pwd`/res ./tests/hbltests/libv3/math.bf  If HyPhy is working correctly, you should see the following output:  {\n  Count :4,\n  Mean :2.25,\n  Median :2,\n  Min :1,\n  Max :4,\n  2.5% :1,\n  97.5% :4,\n  Sum :9,\n  Std.Dev :1.089724735885168,\n  Variance :1.1875,\n  COV :0.4843221048378527,\n  Skewness :0.6520236646847543,\n  Kurtosis :2.096952908587258,\n  Sq. sum :18,\n  Non-negative :4\n}  Note that all examples below will assume that a tree has  not  been defined within your dataset (e.g. FASTA or NEXUS) file. If you opt to use a data file that contains a tree, some of the prompts may change. Specifically, you will not need to provide HyPhy with a separate file containing a tree, but you will have to confirm that HyPhy should use the provided tree.", 
            "title": "Commands"
        }, 
        {
            "location": "/tutorials/dev-branch-tutorial/#use-relax-to-compare-selective-pressures-on-different-parts-of-the-tree", 
            "text": "RELAX is a method described in  Wertheim et al . It is based on the  BS-REL model  branch site framework, but the tree is partitioned (a priori) into non-overlapping sets of branches. Separate distributions of  \\omega  are fitted to each set and compared for relative  relaxation  ( \\omega  values contract to 1) or  intensification  ( \\omega  values move away from 1) of selection pressure.    Note that you can use RELAX via  Datamonkey , you can or follow  this tutorial  to use RELAX in the current version of HyPhy. Otherwise, follow these directions to run RELAX in the development branch of HyPhy:    To use RELAX, you must first prepare your data by partitioning branches into two sets of non-overlapping branches: The  reference  branch set and the  test  branch set. The RELAX test for relaxation/intensification of selection pressure will be run on the  test  branches relative to the baseline  reference  branches. The easiest way to partition your newick tree is using the web-based  phylotree application , as demonstrated:     Launch a terminal session and navigate to the directory where you have compiled the development version of HyPhy.  From within this directory , issue the following command to run RELAX and respond to the prompts. Be sure to provide  absolute paths  for all file names prompted.  ./HYPHYMP LIBPATH=`pwd`/res res/TemplateBatchFiles/SelectionAnalyses/RELAX.bf    Alternatively, you can pipe the arguments directly into the HyPhy call to RELAX.  ./HYPHYMP LIBPATH=`pwd`/res res/TemplateBatchFiles/SelectionAnalyses/RELAX.bf    In the above example, the piped arguments correspond to the following:   1  - Select the Universal Code  path to sequence file  - the  absolute path /filename of the multiple sequence alignment  path to tree file  - the  absolute path /filename of the labeled newick tree  3  - Selects tagged partition for testing relaxed selection  2  - Selects tagged partition for reference branches  1  - Fits descriptive models and run the relax test (4 models) as opposed to a minimal RELAX test (2 models)       Once the RELAX job is completed, there will be a file that is generated in the\nsame directory as the sequence file named  sequence-file .RELAX.json . The file is standard JSON, and can be parsed with any programming language. You can also visualize, explore, and obtain plots from this JSON file using the  HyPhy Vision web application .", 
            "title": "Use RELAX to compare selective pressures on different parts of the tree"
        }, 
        {
            "location": "/tutorials/dev-branch-tutorial/#use-busted-to-test-for-alignment-wide-episodic-diversification", 
            "text": "BUSTED  is a method described in  Murrell et al . It has been extensively tested and shows better power and accuracy than either  \"branch-site\" models in PAML , or the  \"covarion\" style models .    Note that you can use BUSTED via  Datamonkey , you can or follow  this tutorial  to use BUSTED in the current version of HyPhy. Otherwise, follow these directions to run BUSTED in the development branch of HyPhy:    If you would like to use BUSTED to test specific foreground branches for episodic selection, you must prepare your newick phylogeny with annotated branches. To accomplish this, we recommend using the web-based  phylotree widget , as demonstrated below. Export and save this annotated tree for use in BUSTED. Alternatively, you can analyze the entire tree for episodic diversification, in which case branch annotation is not needed and a \"regular\" newick tree will be fine.       Launch a terminal session and navigate to the directory where you have compiled the development version of HyPhy.  From within this directory , issue the following command to run BUSTED and respond to the prompts. Be sure to provide  absolute paths  for all file names prompted.  ./HYPHYMP LIBPATH=`pwd`/res res/TemplateBatchFiles/SelectionAnalyses/BUSTED.bf    Alternatively, you can pipe the arguments directly into the HyPhy call to BUSTED. Note that, as written, this command will instruct BUSTED to consider all branches as foreground:  (echo 1; echo  path to sequence file ; echo  path to tree file ; echo 4; echo d) | ./HYPHYMP LIBPATH=`pwd`/res res/TemplateBatchFiles/SelectionAnalyses/RELAX.bf    In the above example, the piped arguments correspond to the following:   1  - Select the Universal Code  path to sequence file  - the  absolute path /filename of the multiple sequence alignment  path to tree file  - the  absolute path /filename of the labeled newick tree  4  - Test for selection on all branches labeled with {FOREGROUND} jointly  d  - Complete branch selection       Once the BUSTED job is completed, there will be a file that is generated in the\nsame directory as the sequence file named  sequence-file .BUSTED.json . The file is standard JSON, and can be parsed with any programming language. You can also visualize, explore, and obtain plots from this JSON file using the  HyPhy Vision web application .", 
            "title": "Use BUSTED to test for alignment-wide episodic diversification"
        }, 
        {
            "location": "/tutorials/dev-branch-tutorial/#fel-fixed-effects-model-for-detecting-site-wise-selective-pressure", 
            "text": "FEL  is described in  Pond and Frost . FEL estimates\nsite-wise synonymous ( \\alpha ) and non-synonymous ( \\beta ) rates, and uses a\nlikelihood ratio test to determine if  \\beta \\neq \\alpha  at each site. The estimates\naggregate information over all branches, so the signal is derived from\npervasive diversification or conservation.   Note that you can use FEL via  Datamonkey , you can or follow  this tutorial  to use FEL in the current version of HyPhy. Otherwise, follow these directions to run FEL in the development branch of HyPhy:  Please also note that FEL is an MPI-aware script. You are free to use HYPHYMPI (instead of HYPHYMP) in conjunction with mpirun on computing clusters for improved performance.    Launch a terminal session and navigate to the directory where you have compiled the development version of HyPhy.  From within this directory , issue the following command to run BUSTED and respond to the prompts. Be sure to provide  absolute paths  for all file names prompted.  ./HYPHYMP LIBPATH=`pwd`/res res/TemplateBatchFiles/SelectionAnalyses/FEL.bf    Alternatively, you can pipe the arguments directly into the HyPhy call to BUSTED. Note that, as written, this command will instruct BUSTED to consider all branches as foreground:  (echo 1; echo  path to sequence file ; echo  path to tree file ; echo 1; echo 0.1) | ./HYPHYMP LIBPATH=`pwd`/res res/TemplateBatchFiles/SelectionAnalyses/FEL.bf    In the above example, the piped arguments correspond to the following:   1  - Select the Universal Code  path to sequence file  - the  absolute path /filename of the multiple sequence alignment  path to tree file  - the  absolute path /filename of the labeled newick tree  1  - Include all branches in the analysis  0.1  - Significance (p-value) threshold for identifying selected sites       FEL will now run to completion. While running, it will print out a table of site-specific inferences specifically for those sounds found to be under selection (either negative or positive):  |       Codon        |     Partition      |       alpha        |        beta        |        LRT         | Selection   detected? |  |:- -------------: |:- -------------: |:- -------------: |:- -------------: |:- -------------: |:- ----------------: |  |         12         |         1          |         10.917     |          0.000     |          2.931     |    Neg .   p   =   0.0869    |  |         18         |         1          |         54.146     |          0.000     |          8.159     |    Neg .   p   =   0.0043    |  |         20         |         1          |         25.068     |          0.000     |          2.827     |    Neg .   p   =   0.0927    |  |         88         |         1          |         37.678     |          0.000     |          4.004     |    Neg .   p   =   0.0454    |  |         93         |         1          |         26.041     |          0.000     |          3.142     |    Neg .   p   =   0.0763    |  |        101         |         1          |          9.866     |          0.000     |          2.894     |    Neg .   p   =   0.0889    |  |        134         |         1          |         25.423     |          0.000     |          3.949     |    Neg .   p   =   0.0469    |  |        159         |         1          |         23.622     |          0.000     |          3.895     |    Neg .   p   =   0.0484    |   These columns are as follows:   Codon : The codon site.   Partition : The partition for this codon. If the analysis was not partitioned, all codons are in partition 1.  alpha : The estimated  dS  parameter at this site.   beta : The estimated  dN  parameter at this site.   LRT : The likelihood ratio test statistic for comparing null and alternative models to test for selection.  Selection Detected? : Indicates whether this site shows evidence for negative ( Neg. ) or positive ( Pos. ) selection and the associated p-value.     Once the FEL job is completed, there will be a file that is generated in the\nsame directory as the sequence file named  sequence-file .fel.json . The file is standard JSON, and can be parsed with any programming language. Currently it is not possible to explore this JSON with HyPhy Vision although this functionality is expected soon.", 
            "title": "FEL - Fixed Effects Model for detecting site-wise selective pressure"
        }
    ]
}